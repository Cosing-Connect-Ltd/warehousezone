@model Ganedata.Core.Entities.Domain.AccountAddresses
@using Ganedata.Core.Entities.Enums;
@{
    ViewBag.Title = "SaveAddress";
    var address = ViewBag.Addresses as List<Ganedata.Core.Entities.Domain.AccountAddresses>;
}

<div class="about bg-white get-address-page uni-get-address-page">
    <div class="container-fluid custom-max-width">
        <div class="row">
            <div class="col-md-3 col-sm-12 ">
                <ul class="menu-about">
                    <li><a href="@Url.Action("GetAddress", "Orders", new { accountId= ViewBag.AccountIds, step = (int)CheckoutStep.BillingAddress })" class="">Billing Address</a></li>
                    <li><a href="@Url.Action("GetAddress", "Orders", new { accountId= ViewBag.AccountIds,accountBillingId=ViewBag.BillingAddressId, step = (int)CheckoutStep.ShippmentMethod })" style="@((int)ViewBag.Step < (int)CheckoutStep.ShippmentMethod?"pointer-events:none; cursor: default; color: gray; background: #f6f7f8":"")">Shipping Method</a></li>
                    <li>
                        <a href="@Url.Action("GetAddress", "Orders", new { accountId= ViewBag.AccountIds,accountBillingId=ViewBag.BillingAddressId,shippmentTypeId=ViewBag.ShippmentMethodType, step = ((ShippingMethodType)(ViewBag.ShippmentMethodType ?? (int)ShippingMethodType.Delivery) == ShippingMethodType.Delivery ? (int)CheckoutStep.ShippingAddress : (int)CheckoutStep.CollectionPiont) })" style="@((int)ViewBag.Step < (int)CheckoutStep.ShippingAddress?"pointer-events:none; cursor: default; color: gray; background: #f6f7f8":"")">
                            @((ShippingMethodType)(ViewBag.ShippmentMethodType ?? (int)ShippingMethodType.Delivery) == ShippingMethodType.Delivery ? "Shipping Address" : "Collection Point")
                        </a>
                    </li>
                    <li><a href="@Url.Action("GetAddress", "Orders", new { accountId= ViewBag.AccountIds,accountBillingId=ViewBag.BillingAddressId,shippmentTypeId=ViewBag.ShippmentMethodType, step = ((int)CheckoutStep.PaymentMethod), accountShippingId=ViewBag.ShippingAddressId })" style="@((int)ViewBag.Step < (int)CheckoutStep.PaymentMethod?"pointer-events:none; cursor: default; color: gray; background: #f6f7f8":"")">Payment Method</a></li>
                </ul>
            </div>
            <div class="col-md-8 col-sm-12 bg-white login my-account">
                <div class="about-cnt" style="display:@((CheckoutStep)ViewBag.Step == CheckoutStep.BillingAddress || (CheckoutStep)ViewBag.Step == CheckoutStep.ShippingAddress || (CheckoutStep)ViewBag.Step == CheckoutStep.EditAddress?"block":"none")">
                    <div class="content-wrapper select">
                        <h2 class="text-uppercase">@ViewBag.AddressMessage</h2>
                        <hr class="custom-hr">
                        @if (address != null)
                        {
                            for (int i = 0; i < address.Count; i += 2)
                            {
                                <div class="row">
                                    @if (address.ElementAtOrDefault(i) != null)
                                    {
                                        <div class="col-md-6 both-btn">
                                            <p>
                                                @if (!string.IsNullOrEmpty(address[i].AddressLine1))
                                                {
                                                    <b>@address[i].AddressLine1</b><br />
                                                }
                                                @if (!string.IsNullOrEmpty(address[i].AddressLine2))
                                                {
                                                    @address[i].AddressLine2<br />
                                                }
                                                @if (!string.IsNullOrEmpty(address[i].AddressLine3) || !string.IsNullOrEmpty(address[i].PostCode))
                                                {
                                                    @address[i].AddressLine3 <span>&nbsp;</span> @address[i].PostCode<br />
                                                }
                                                @if (address[i].GlobalCountry != null)
                                                {
                                                    @address[i].GlobalCountry.CountryName<br />
                                                }
                                                @if (!string.IsNullOrEmpty(address[i].Telephone))
                                                {
                                                    <b>Phone:</b> @address[i].Telephone<br />
                                                }



                                            </p>
                                            @if (address[i].AddTypeBilling == true)
                                            {
                                                <div class="">
                                                    <a href="@Url.Action("GetAddress", "Orders", new { accountId= ViewBag.AccountIds,accountBillingId=address[i].AddressID, step=(int)CheckoutStep.ShippmentMethod })" role="button" class="btn btn-default" style="font-size:11px">Select billing address</a>
                                                    <a href="@Url.Action("GetAddress", "Orders", new { accountId= address[i].AccountID, accountAddressId= address[i].AddressID, step=(int)CheckoutStep.EditAddress, parentStep=(int)CheckoutStep.BillingAddress })" role="button" class="btn btn-default" style="font-size:11px">Edit address</a>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="">
                                                    <a href="@Url.Action("GetAddress", "Orders", new { accountId= ViewBag.AccountIds,accountBillingId=ViewBag.BillingAddressId, shippmentTypeId=ViewBag.ShippmentMethodType,step=(int)CheckoutStep.PaymentMethod,accountShippingId=address[i].AddressID })" role="button" class="btn btn-primary" style="font-size:11px">Select shipping address</a>
                                                    <a href="@Url.Action("GetAddress", "Orders", new { accountId= address[i].AccountID,accountBillingId=ViewBag.BillingAddressId, shippmentTypeId=ViewBag.ShippmentMethodType,step=(int)CheckoutStep.EditAddress, accountAddressId= address[i].AddressID, parentStep=(int)CheckoutStep.ShippingAddress })" role="button" class="btn btn-success" style="font-size:11px">Edit Address</a>
                                                    <a href="@Url.Action("RemoveShippingAddress", "Orders", new {accountId=address[i].AccountID,accountBillingId=ViewBag.BillingAddressId, shippmentTypeId=ViewBag.ShippmentMethodType, accountAddressId=address[i].AddressID })" role="button" class="btn btn-danger custom-danger" style="font-size:11px">Remove address</a>
                                                </div>
                                            }

                                        </div>
                                    }
                                    @if (address.ElementAtOrDefault(i + 1) != null)
                                    {
                                        <div class="col-md-6 both-btn">
                                            <p class="p-mt-20">
                                                @if (!string.IsNullOrEmpty(address[i + 1].AddressLine1))
                                                {
                                                    <b>@address[i + 1].AddressLine1</b><br />
                                                }
                                                @if (!string.IsNullOrEmpty(address[i + 1].AddressLine2))
                                                {
                                                    @address[i + 1].AddressLine2<br />
                                                }
                                                @if (!string.IsNullOrEmpty(address[i + 1].AddressLine3) || !string.IsNullOrEmpty(address[i + 1].PostCode))
                                                {
                                                    @address[i + 1].AddressLine3 @address[i + 1].PostCode<br />
                                                }
                                                @if (address[i + 1].GlobalCountry != null)
                                                {
                                                    @address[i + 1].GlobalCountry.CountryName<br />
                                                }
                                                @if (!string.IsNullOrEmpty(address[i + 1].Telephone))
                                                {
                                                    <b>Phone:</b> @address[i + 1].Telephone<br />

                                                }


                                            </p>
                                            <div class="">
                                                <a href="@Url.Action("GetAddress", "Orders", new { accountId= ViewBag.AccountIds,accountBillingId=ViewBag.BillingAddressId, shippmentTypeId=ViewBag.ShippmentMethodType,step=(int)CheckoutStep.PaymentMethod,accountShippingId=address[i+1].AddressID })" role="button" class="btn btn-primary" style="font-size:11px">Select shipping address</a>
                                                <a href="@Url.Action("GetAddress","Orders",new {accountId=address[i+1].AccountID,accountBillingId=ViewBag.BillingAddressId, shippmentTypeId=ViewBag.ShippmentMethodType,step=(int)CheckoutStep.EditAddress, accountAddressId=address[i+1].AddressID, parentStep=(int)CheckoutStep.ShippingAddress })" role="button" class="btn btn-success" style="font-size:11px">Edit address</a>
                                                <a href="@Url.Action("RemoveShippingAddress", "Orders", new {accountId=address[i+1].AccountID,accountBillingId=ViewBag.BillingAddressId, shippmentTypeId=ViewBag.ShippmentMethodType, accountAddressId=address[i+1].AddressID })" role="button" class="btn btn-danger custom-danger" style="font-size:11px">Remove address</a>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <br />
                            }

                        }

                        @if ((CheckoutStep)ViewBag.Step == CheckoutStep.ShippingAddress || (CheckoutStep)ViewBag.Step == CheckoutStep.EditAddress)
                        {
                            <div>
                                <h4 class="text-uppercase mt-20 uni-add-new-address-h4">@(Model == null ? "Add a new address" : "Edit Address")</h4>
                                <div class="search-container row">
                                    <div class="search-box input-group col-md-6 col-12 ">
                                        <input id="postCode" type="text" name="search" value="" placeholder="Enter PostCode" class="text-search-postcode form-control text-uppercase" />
                                        <div id="sp-btn-search" class="input-group-btn">
                                            <button type="button" id="btn-search-category" class="btn btn-search-category" onclick="SearchPostCode();">Find Address</button>
                                        </div>
                                    </div>
                                    <div id="selectAddresss" class="col-md-6 clearfix">
                                        <select id="selectApiAddress" name="address" class="find-address-select" onchange="OnchangeDropdownAddress()">
                                        </select>
                                    </div>
                                </div>

                                <hr class="custom-hr">
                                @using (Html.BeginForm("SaveAddress", "Orders", new { shippmentTypeId = ViewBag.ShippmentMethodType, accountBillingId = ViewBag.BillingAddressId }))
                                {
                                    @Html.HiddenFor(model => model.AddressID)
                                    <div class="">
                                        <div class="row">
                                            <div class="col-md-6 col-sm-6">
                                                <div class="form-group">
                                                    @Html.EditorFor(model => model.AddressLine1, new { htmlattributes = new { @class = "form-control input-md inputNew", @placeholder = "Address Line 1", @required = "Required" } })
                                                    @*<input type="text" class="form-control input-md inputNew" size="18" placeholder="Address Line 1">*@
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-sm-6">
                                                <div class="form-group">
                                                    @Html.EditorFor(model => model.AddressLine2, new { htmlattributes = new { @class = "form-control input-md inputNew", @placeholder = "Address Line 2", @required = "Required" } })
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-sm-6">
                                                <div class="form-group">
                                                    @Html.EditorFor(model => model.AddressLine3, new { htmlattributes = new { @class = "form-control input-md inputNew", @placeholder = "Address Line 3", @required = "Required" } })
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-sm-6">
                                                <div class="form-group">
                                                    @Html.EditorFor(model => model.PostCode, new { htmlattributes = new { @class = "form-control input-md inputNew", @placeholder = "Postal Code", @required = "Required" } })
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-sm-6">
                                                <div class="form-group">
                                                    @Html.EditorFor(model => model.Telephone, new { htmlattributes = new { @class = "form-control input-md inputNew h-40px", @placeholder = "Telephone Number", @required = "Required" } })
                                                </div>
                                            </div>
                                            <div class="col-md-6 col-sm-6">
                                                <div class="form-group">
                                                    @Html.DropDownListFor(model => model.CountryID, ViewBag.Country as SelectList, new { @class = "find-address-select", @required = "Required" })

                                                </div>
                                            </div>

                                            @if ((CheckoutStep)ViewBag.Step == CheckoutStep.ShippingAddress || (CheckoutStep)ViewBag.ParentStep == CheckoutStep.ShippingAddress)
                                            {
                                                <input type="hidden" name="AddTypeShipping" id="AddTypeShipping" value="true" />
                                            }
                                            else
                                            {
                                                <input type="hidden" name="AddTypeBilling" id="AddTypeBilling" value="true" />

                                            }

                                            @Html.HiddenFor(model => model.AccountID, (int)(ViewBag.AccountIds))

                                            <div class="col-md-12">
                                                <div class="button-submit">
                                                    <button type="Submit" name="submitNewsletter" class="btn btn-block">Save Address</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
                @if ((CheckoutStep)ViewBag.Step == CheckoutStep.ShippmentMethod)
                {
                    <div class="content-wrapper select">
                        <h2 class="text-uppercase">Select Shipping Method</h2>
                        <hr class="custom-hr">
                        <div class="shippingMethod">
                            <div class="form-check-inline">
                                <label class="control-label" for="radio1">
                                    <input type="radio" class="form-check-input" id="radio1" name="optradio" value="0" @((ViewBag.ShippmentMethodType != null && (ShippingMethodType)ViewBag.ShippmentMethodType == ShippingMethodType.Pickup) ? "checked" : "")>Pick up (From Store) Free
                                </label>
                            </div>
                        </div>
                        <div class="shippingMethod">
                            <div class="form-check-inline">
                                <label class="control-label" for="radio2">
                                    <input type="radio" class="form-check-input" id="radio2" name="optradio" value="1" @((ViewBag.ShippmentMethodType != null && (ShippingMethodType)ViewBag.ShippmentMethodType == ShippingMethodType.Delivery) ? "checked" : "")>Delivery (Courier) $10
                                </label>
                            </div>
                        </div>
                        <div class="">
                            <a href="javascript:;" role="button" class="btn btn-primary select-shipping-method-btn" style="font-size:11px" onclick="ChooseShippingAddress(@ViewBag.AccountIds,@ViewBag.BillingAddressId)">Select shipping method</a>
                        </div>
                    </div>
                }
                @if ((CheckoutStep)ViewBag.Step == CheckoutStep.CollectionPiont)
                {
                    <div class="content-wrapper select">
                        @Html.Hidden("collectionPointId", (int?)ViewBag.CollectionPointId)
                        <h2 class="text-uppercase">Select Collection Point</h2>
                        <hr class="custom-hr">
                        <div class="search-container row">
                            <div class="search-box input-group col-md-6 col-12 ">
                                <input id="collection-postCode" type="text" name="search" value="" placeholder="Enter PostCode" class="text-target-postcode form-control text-uppercase" />
                                <div id="sp-btn-search" class="input-group-btn">
                                    <button type="button" id="btn-search-category" class="btn btn-search-category" onclick="findNearCollectionPoints();">Show Collection Points</button>
                                </div>
                            </div>
                        </div>
                        <br />
                        <div class="collection-points"></div>
                        <br />
                        <div>
                            <a href="javascript:;" role="button" class="btn btn-primary select-shipping-method-btn" style="font-size:11px" onclick="ChooseCollectionPoint(@ViewBag.AccountIds,@ViewBag.BillingAddressId,@ViewBag.ShippmentMethodType,@((int)CheckoutStep.PaymentMethod))">Select shipping method</a>
                        </div>
                    </div>
                }
                @if ((CheckoutStep)ViewBag.Step == CheckoutStep.PaymentMethod)
                {
                    <div class="content-wrapper select">
                        <h2 class="text-uppercase">Select Payment Method</h2>
                        <hr class="custom-hr">
                        <div class="shippingMethod ">
                            <div class="form-check-inline">
                                <label class="control-label" for="radio2">
                                    <input type="radio" class="form-check-input" id="Cash" name="paymentMethod" value="2">  Cash
                                </label>
                            </div>
                        </div>
                        <div class="shippingMethod ">
                            <div class="form-check-inline">
                                <label class="control-label" for="radio1">
                                    <input type="radio" class="form-check-input" id="PayPal" name="paymentMethod" value="1">  Paypal
                                </label>
                            </div>
                        </div>
                        <div class="">
                            <a href="javascript:;" role="button" class="btn btn-primary select-payment-method-btn" style="font-size:11px" onclick="ChoosePaymentMethod(@ViewBag.AccountIds,@(ViewBag.ShippingAddressId ?? "null"),@ViewBag.ShippmentMethodType,@ViewBag.CollectionPointId)">Select payment method</a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>
