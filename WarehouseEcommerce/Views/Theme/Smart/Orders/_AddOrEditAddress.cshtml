@model Ganedata.Core.Entities.Domain.AccountAddresses
@using Ganedata.Core.Entities.Enums;

<div class="addNewAddrWrap">
    <h5 class="subheadCmn">@(Model == null ? ((CheckoutStep)ViewBag.CurrentStep == CheckoutStep.ShippingAddress ? "Add a new address" : string.Empty) : "Edit Address")</h5>
    <div class="addNwAdrrFormWrap">
        <div class="row">
            <div class="col-lg-6">
                <div class="form-group">
                    <div class="findAddrWrap">
                        <input type="text" id="postCode" name="search" class="findAddrInput text-search-postcode" placeholder="Enter Postcode" />
                        <button class="fadBtn" onclick="SearchPostCode();">Search</button>
                    </div>
                </div>
            </div>
            <div id="selectAddresss" class="col-lg-6" style="display: none">
                <div class="form-group">
                    <select id="selectApiAddress" name="address" class="find-address-select" onchange="OnchangeDropdownAddress()">
                    </select>
                </div>
            </div>
        </div>

        @using (Html.BeginForm("SaveAddress", "Orders", new { deliveryMethodId = ViewBag.DeliveryMethodId, billingAddressId = ViewBag.BillingAddressId }))
        {
            @Html.HiddenFor(model => model.AddressID)
            <div class="row">
                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.EditorFor(model => model.AddressLine1, new { htmlattributes = new { @placeholder = "Address Line 1", @required = "Required" } })
                        @*<input type="text" class="form-control input-md inputNew" size="18" placeholder="Address Line 1">*@
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.EditorFor(model => model.AddressLine2, new { htmlattributes = new { @placeholder = "Address Line 2", @required = "Required" } })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.EditorFor(model => model.AddressLine3, new { htmlattributes = new { @placeholder = "Address Line 3", @required = "Required" } })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.EditorFor(model => model.PostCode, new { htmlattributes = new { @placeholder = "Postal Code", @required = "Required" } })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.EditorFor(model => model.Telephone, new { htmlattributes = new { @placeholder = "Telephone Number", @required = "Required" } })
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="form-group">
                        @Html.DropDownListFor(model => model.CountryID, ViewBag.Countries as SelectList, new { @required = "Required" })
                    </div>
                </div>

                @if ((CheckoutStep)ViewBag.CurrentStep == CheckoutStep.ShippingAddress || (CheckoutStep)ViewBag.ParentStep == CheckoutStep.ShippingAddress)
                {
                    <input type="hidden" name="AddTypeShipping" id="AddTypeShipping" value="true" />
                }
                else
                {
                    <input type="hidden" name="AddTypeBilling" id="AddTypeBilling" value="true" />
                }

                @Html.HiddenFor(model => model.AccountID, (int)(ViewBag.AccountId))
            </div>

            <div class="saveAddrWrap">
                <button type="Submit" name="submitNewsletter" class="saveAddrBtn">Save Address</button>
            </div>
        }
    </div>
</div>
