@model Ganedata.Core.Entities.Domain.ProductDynamicFilteringViewModel

@{
    var requestQuery = Request.QueryString["filters"] ?? String.Empty;
}
<div class="nb_prd_filterwrap">
    @if (Model.TotalCount > 0 || Model.Categories.Count() <= 0)
    {
        <div class="prod_count_sec">
            <h5 class="count">@(Model.FilteredCount + " Products")</h5>
        </div>
    }
    @if (Model.Categories.Count() > 0)
    {
        <div class="type-content">
            <div class="nb_filter_body">
                <ul class="nb_prd_filter_listouter">
                    @foreach (var item in Model.Categories)
                    {
                        <li class="list-group-item"><a href="@Url.Action("list", "Products", new { category = item.Name, categoryId = item.Id})">@item.Name</a></li>
                    }
                </ul>
            </div>
        </div>
    }
    <div class="nb_fltr_accrd_wrap">
        <div id="accordion" class="nb_filter_accordion">
            @if (!string.IsNullOrEmpty(Model.MinPrice?.Trim()) && !string.IsNullOrEmpty(Model.MaxPrice?.Trim()))
            {
                <div class="nb_filter_head price-range-div" id="filter1">
                    <h5 class="mb-0">
                        <button id="price_btn" class="btn btn-link">
                            Price
                        </button>
                    </h5>
                </div>
                <div class="nb_filter_body price-content">
                    <div class="filtered-amout">
                        <div id="amount"></div>
                    </div>

                    <div class="price-range-div">
                        <div class="nb_filter_body pb-0">
                            <ul class="nb_prd_filter_listouter">

                                <div id="slider-range"></div>

                                <li class="list-group-item" style="display: none">
                                    <input type="checkbox" id="prices" class="checkbox-inline" value="" @(requestQuery.Contains("prices>") ? "checked" : "")>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            }
            @if (Model.Brands?.Count > 1 || (Model.Brands?.Count == 1 && requestQuery.Contains((Model.Brands.First().Value + ":" + Model.Brands.First().Key.ToString()))))
            {
                <div class="nb_filter_head" id="filter2">
                    <h5 class="mb-0">
                        <button id="brand_btn" class="btn btn-link">
                            Brand
                        </button>
                    </h5>
                </div>
                <div class="brand-content">
                    <div class="nb_filter_body">
                        <ul class="nb_prd_filter_listouter">
                            @foreach (var item in Model.Brands)
                            {
                                string name = item.Value.Replace(" ", "_").Replace(",", "^") + ":" + item.Key.ToString();
                                <li class="list-group-item"><input type="checkbox" id="brands" class="checkbox-inline" title="@(item.Value)" value="@(name)" @(requestQuery.Contains(name) ? "checked" : "")>@(item.Value)</li>
                            }
                        </ul>
                    </div>
                </div>
            }
            @if (Model.Types?.Count > 1 || (Model.Types?.Count == 1 && requestQuery.Contains((Model.Types.First().Value + ":" + Model.Types.First().Key.ToString()))))
            {
                <div class="nb_filter_head" id="filter3">
                    <h5 class="mb-0">
                        <button id="type_btn" class="btn btn-link">
                            By Type
                        </button>
                    </h5>
                </div>
                <div class="type-content">
                    <div class="nb_filter_body">
                        <ul class="nb_prd_filter_listouter">
                            @foreach (var item in Model.Types)
                            {
                                string name = item.Value.Replace(" ", "_").Replace(",", "^") + ":" + item.Key.ToString();
                                <li class="list-group-item" id="type"><input type="checkbox" id="types" class="checkbox-inline" title="@(item.Value)" value="@(name)" @(requestQuery.Contains(name) ? "checked" : "")>@(item.Value)</li>
                            }
                        </ul>
                    </div>
                </div>
            }
            @* Adding dynmic attributes here *@
            @if (Model.Attributes != null)
            {
                foreach (var attribute in Model.Attributes)
                {
                    if (attribute.Value?.Count > 1 || (attribute.Value?.Count == 1 && requestQuery.Contains(attribute.Value.First().Value)))
                    {
                        <div class="nb_filter_head" id="filter_@(attribute.Key.AttributeId + attribute.Value.Count)">
                            <h5 class="mb-0">
                                <button id="@(attribute.Key.AttributeId + attribute.Value.Count)" onclick="showAttribute(event)" class="btn btn-link">
                                    @attribute.Value.FirstOrDefault().ProductAttributes.AttributeName
                                </button>
                            </h5>
                        </div>
                        <div class="content_@(attribute.Key.AttributeId + attribute.Value.Count)">
                            <div class="nb_filter_body">
                                <ul class="nb_prd_filter_listouter">
                                    @foreach (var attributeValue in attribute.Value)
                                    {
                                        string name = attributeValue.Value.Replace(" ", "_").Replace(",", "^") + ":" + @attributeValue.AttributeValueId;
                                        <li class="list-group-item"><input type="checkbox" id="@(attribute.Key.AttributeName.Replace(" ", "_").Replace(",", "^") + ":" + attribute.Key.AttributeId)" class="checkbox-inline" value="@name" @(requestQuery.Contains(name) ? "checked" : "")>@(attributeValue.Value)</li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>

@if ((!string.IsNullOrEmpty(Model.MinPrice?.Trim()) && !string.IsNullOrEmpty(Model.MaxPrice?.Trim())))
{
    <script>
    $(function () {

        var min =Math.floor(@Model.MinPrice);
        var max = Math.ceil(@Model.MaxPrice);

        if ((max - min) <= 1 || isNaN(min) || isNaN(max)) {
            $(".price-range-div").hide();
            return;
        }

        var prices;
        var parameterValue = getUrlParameter("filters");

        if (parameterValue != null) {
            var parameterValueList = parameterValue.split("|");
            jQuery.each(parameterValueList, function(index, item) {
                if (item.indexOf('prices>') > -1) {
                    prices = item.replace('prices>', '');
                }
            });
        }

        if (prices != null) {;
            prices = prices.split("-");
            min = Math.floor(parseFloat(prices[0]));
            max = Math.ceil(parseFloat(prices[1]));
            $('#prices').prop('checked', true);
            $("#prices").val(prices[0] + "-" +prices[1]);
        }

        $("#slider-range").slider({
            range: true,
            step:1,
            min: Math.floor(@Model.MinPrice),
            max: Math.ceil(@Model.MaxPrice),
            values: [min, max],
            slide: function(event, ui) {
                $("#amount").html('@ViewBag.CurrencySymbol' + Math.floor(ui.values[0]) + " - "+'  @ViewBag.CurrencySymbol' + Math.ceil(ui.values[1]));

            },
            stop: function (event, ui) {

                $("#prices").val(ui.values[0] + "-" + ui.values[1]);
                $("#prices").click();


            }
        });

        $("#amount").html('@ViewBag.CurrencySymbol'+min+
            " -" +
            '  @ViewBag.CurrencySymbol' + max);
    });
    </script>
}


@if (Model.Attributes != null || Model.Brands != null || Model.Types != null)
{
    <script>
    $(function () {
        $("input[type=checkbox]").on("change", function (e) {

            var arr = [];
            var data = "";
            $('#prices').prop('checked', true);
            var urlString = $(location).attr('href');
            var pagerep = new RegExp("&page=\\d+");
            urlString = urlString.replace(pagerep, '');
            urlString = removeURLParameter(urlString, "page");
            urlString = removeURLParameter(urlString, "filters");
            var filtersPrefix = ((window.location.href.indexOf('?') !== -1) ? "&" : "?") + "filters=";

            urlString += filtersPrefix;
            $(":checkbox").each(function () {

                if (this.checked) {
                    if (urlString.indexOf($(this).val()) < 0) {
                        arr.push($(this).val());
                        data = this.id;
                        if (urlString.indexOf(data) < 0) {
                            var indexof = urlString.lastIndexOf("=");
                            var checkPreviousString = urlString.substr(indexof - 7, 7);
                            var found = urlString.charAt(indexof + 1);
                            if (checkPreviousString === "filters" && found === "") {
                                urlString += encodeURIComponent(data + ">" + $(this).val());
                            } else {
                                urlString += encodeURIComponent("|" + data + ">" + $(this).val());
                            }
                        } else {
                            if (urlString.indexOf($(this).val()) < 0) {
                                urlString += encodeURIComponent("," + $(this).val());
                            }
                        }
                    }
                }
            });
            if (urlString.endsWith("filters=")) {
                urlString = urlString.substring(0, urlString.length - 9);
            }
            startLoading();
            location.href = urlString;
        });
    });
    </script>
}

<script>
    $(document).ready(function () {
        $('#price_btn').click(function () {
            $('.price-content').slideToggle("fast");;
        });
        $('#brand_btn').click(function () {
            $('.brand-content').slideToggle("fast");;
        });
        $('#type_btn').click(function () {
            $('.type-content').slideToggle("fast");;
        });
    });

    function showAttribute(event) {
        var id = event.target.id
        $('.content_' + id).slideToggle("fast");
    };

    var getUrlParameter = function getUrlParameter(sParam) {
        var sPageURL = window.location.search.substring(1),
            sURLVariables = sPageURL.split('&'),
            sParameterName,
            i;

        for (i = 0; i < sURLVariables.length; i++) {
            sParameterName = sURLVariables[i].split('=');

            if (sParameterName[0] === sParam) {
                return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
            }
        }
    };
</script>