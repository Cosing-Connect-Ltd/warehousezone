@using Ganedata.Core.Entities.Domain
@using Ganedata.Core.Entities.Enums
@model ProductMaster
<section class="nb_sec nb_prdlisting_pgsec">
    <div class="container">
        <div class="row">
            <div class="col-md-12 col-lg-12 offset-lg-1">
                <div class="nb_prd_det_rightsec">
                    <h2 class="head">@Model.Name</h2>
                    @Html.HiddenFor(model => model.ProductId);
                    <span class="prd_amnt">@ViewBag.CurrencySymbol @Model.SellPrice</span>
                    <div class="availibility">
                        @if (Model.InventoryStocks.Any(i => i.Available > 0))
                        {
                            <span>Availability:</span> <br />
                            @((Model.InventoryStocks.Sum(i => i.Available) <= 10 ? "only " : "") + Model.InventoryStocks.Sum(i => i.Available).ToString("#") + " items left");
                        }
                        else
                        {
                            <span></span> <br />
                            <span>Currently unavailable.</span>
                        }
                    </div>

                    @if (ViewBag.BaseProduct.ProductType != Ganedata.Core.Entities.Enums.ProductKitTypeEnum.ProductByAttribute)
                    {
                        foreach (var item in Model.ProductAttributeValuesMap.Where(a => a.IsDeleted != true).OrderBy(m => m.ProductAttributeValues.AttributeId))
                        {
                            <div>
                                <div class="sizeWrap">
                                    <p>@Html.Raw(item.ProductAttributeValues.ProductAttributes.AttributeName) : <span>@Html.Raw(item.ProductAttributeValues.Value)</span></p>
                                </div>
                            </div>
                        }
                    }

                    @if (ViewBag.BaseProduct.ProductType == Ganedata.Core.Entities.Enums.ProductKitTypeEnum.ProductByAttribute)
                    {
                        foreach (var item in ViewBag.AvailableAttributes)
                        {
                            var attribute = item.Key;
                            var selectedAttributeValue = Model.ProductAttributeValuesMap.FirstOrDefault(a => a.IsDeleted != true && a.ProductAttributeValues.AttributeId == attribute.AttributeId)?.ProductAttributeValues;
                            <div>
                                <div class="sizeWrap">
                                    <p>@Html.Raw(attribute.AttributeName) : <span>@Html.Raw(selectedAttributeValue?.Value)</span></p>
                                    <ul class="size_boxList">
                                        @{
                                            foreach (var attributeValue in item.Value)
                                            {

                                                var relatedProducts = (ViewBag.RelatedProducts as IEnumerable<ProductMaster>).Where(p => p.SKUCode != Model.SKUCode &&
                                                                                                            p.ProductAttributeValuesMap.Any(m => m.IsDeleted != true && m.ProductAttributeValues.AttributeId == attribute.AttributeId &&
                                                                                                                                                 m.ProductAttributeValues.AttributeValueId == attributeValue.AttributeValueId));

                                                if (relatedProducts.Count() > 1)
                                                {
                                                    foreach (var currentProductAttribute in Model.ProductAttributeValuesMap.Where(am => am.IsDeleted != true && am.ProductAttributeValues.AttributeId != attribute.AttributeId))
                                                    {
                                                        var resultQuery = relatedProducts.Where(p => p.ProductAttributeValuesMap.Any(m => m.IsDeleted != true && m.ProductAttributeValues.AttributeId == currentProductAttribute.ProductAttributeValues.AttributeId &&
                                                                                                                                          m.ProductAttributeValues.AttributeValueId == currentProductAttribute.AttributeValueId));

                                                        if (resultQuery.Count() == 1)
                                                        {
                                                            relatedProducts = resultQuery;
                                                            break;
                                                        }

                                                        if (resultQuery.Count() != 0)
                                                        {
                                                            relatedProducts = resultQuery;
                                                        }
                                                    }
                                                }

                                                var isAttributeAvailableWithCurrentSelection = true;

                                                var attribiteStatusCheckQuery = (ViewBag.RelatedProducts as IEnumerable<ProductMaster>).Where(m => m.SKUCode != Model.SKUCode &&
                                                                                                            m.ProductAttributeValuesMap.Any(p => p.IsDeleted != true &&
                                                                                                                                                 p.ProductAttributeValues.AttributeId == attribute.AttributeId &&
                                                                                                                                                 p.ProductAttributeValues.AttributeValueId == attributeValue.AttributeValueId));

                                                foreach (var currentProductAttribute in Model.ProductAttributeValuesMap.Where(m => m.ProductAttributeValues.AttributeId != attribute.AttributeId))
                                                {
                                                    attribiteStatusCheckQuery = attribiteStatusCheckQuery.Where(m => m.ProductAttributeValuesMap.Any(p => p.IsDeleted != true &&
                                                                                                                                                          p.ProductAttributeValues.AttributeId == currentProductAttribute.ProductAttributeValues.AttributeId &&
                                                                                                                                                          p.ProductAttributeValues.AttributeValueId == currentProductAttribute.AttributeValueId));

                                                    isAttributeAvailableWithCurrentSelection = attribiteStatusCheckQuery.Any();
                                                }

                                                var isSelectedAttributeValue = attributeValue.AttributeValueId == selectedAttributeValue?.AttributeValueId;

                                                @Html.Raw("<li class=\"col3 " + (isSelectedAttributeValue ? "active" : "") + (!isSelectedAttributeValue && !isAttributeAvailableWithCurrentSelection ? "unavailable-attribute\">" : "\">") +
                                                                (isSelectedAttributeValue ? "<a href='javascript:;'id='selected-productids' data-productid=" + Model.ProductId + " data-skuCode=" + Model.SKUCode + ">" : $"<a href='javascript:;' onclick = 'getSelectedAttributesProduct(event,\"" + ViewBag.BaseProduct.SKUCode + "\"," + (relatedProducts.FirstOrDefault()?.ProductId ?? Model.ProductId) + "," + ViewBag.Quantity + ")'>") +
                                                                (!attributeValue.ProductAttributes.IsColorTyped ?
                                                                                "<span style=\"color:" + (!string.IsNullOrEmpty(attributeValue.Color?.Trim()) ? attributeValue.Color : attributeValue.Value) + "\">" + attributeValue.Value + "</span>" :
                                                                                "<span style=\"background-color:" + (!string.IsNullOrEmpty(attributeValue.Color?.Trim()) ? attributeValue.Color : attributeValue.Value) + ";color:" + (!string.IsNullOrEmpty(attributeValue.Color?.Trim()) ? attributeValue.Color : attributeValue.Value) + "\">-</span>") +
                                                            "</a></li>");
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>

    </div>

</section>
