@using Ganedata.Core.Entities.Domain
@using System.Configuration
@model ProductMaster
@{
    ViewBag.Title = Model.Name + " | " + ViewBag.SiteDescription;
    var Images = ConfigurationManager.AppSettings["ImageFormats"].Split(new char[] { ',' });
}
<section class="nb_sec nb_prdlisting_pgsec">
    <div class="container">
        <div class="breadCrumbtopsec">
            <div class="nb_bread_crumbwrap">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="/"><i class="icon-home"></i></a>
                        </li>
                        <li class="breadcrumb-item">
                            <a href="/">Home</a>
                        </li>
                        <li>></li>
                        @if (ViewBag.Category != null && !string.IsNullOrEmpty(ViewBag.Category))
                        {
                            <li class="breadcrumb-item"><a href="@Url.Action("list", "Products", new { category = ViewBag.Category})">@ViewBag.Category</a></li>
                            <li>></li>
                        }
                        @*@if (Url.Action() != Url.Action("list", "Products", new { department = Model.TenantDepartment.DepartmentName }))
                            {
                                if (!string.IsNullOrEmpty(Model?.ProductGroup?.ProductGroup))
                                {
                                    <li class="breadcrumb-item"><a href="@Url.Action("list", "Products", new { group = Model.ProductGroup.ProductGroup, department = Model.TenantDepartment.DepartmentName})">@(!string.IsNullOrEmpty(Model?.ProductGroup?.ProductGroup) ? Model.ProductGroup.ProductGroup : "")</a></li>
                                }
                            }*@
                        @if (ViewBag.SubCategory != null && !string.IsNullOrEmpty(ViewBag.SubCategory))
                        {
                            <li class="breadcrumb-item"><a href="@Url.Action("list", "Products", new { category = ViewBag.SubCategory})">@ViewBag.SubCategory</a></li>
                            <li>></li>
                        }

                        <li class="breadcrumb-item">@Model.Name</li>
                    </ol>
                </nav>
            </div>
        </div>
        <div class="row">
            <div class="col-md-5 col-lg-5">
                <div class="nb_prd_viewingsecWrap" id="Prod_carr_viewer">
                    <span id="zoomViewTrigger"><i class="icon-search"></i></span>
                    <span class="img_view_area">
                        <img id="zoom_01"
                             src="@(!string.IsNullOrEmpty(Model.DefaultImage)?ViewBag.BaseFilePath + Model.DefaultImage : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")"
                             data-zoom-image="@(!string.IsNullOrEmpty(Model.DefaultImage)?ViewBag.BaseFilePath + Model.DefaultImage:ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")" />
                    </span>
                    <div class="img_thumb_sliderwrap">
                        <div id="gal01" class="owl-carousel owl-theme nb_imageZoomCarrousle">
                            @foreach (var item in Model.ProductFiles)
                            {
                                var extension = Path.GetExtension(item.FilePath);
                                <div class="item">
                                    <a href="#" data-image="@(!string.IsNullOrEmpty(item.FilePath) ? ViewBag.BaseFilePath + item.FilePath : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")" data-zoom-image="@(!string.IsNullOrEmpty(item.FilePath) ? ViewBag.BaseFilePath + item.FilePath : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")">
                                        <img id="zoom_01" src="@(!string.IsNullOrEmpty(item.FilePath) ? ViewBag.BaseFilePath + item.FilePath : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")" alt="" />
                                    </a>
                                </div>

                            }

                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-7 col-lg-6 offset-lg-1">
                <div class="nb_prd_det_rightsec">
                    <h2 class="head">@Model.Name</h2>
                    <p class="subContent">
                        @Model.SKUCode
                    </p>
                    <span class="prd_amnt">@ViewBag.CurrencySymbol @Model.SellPrice</span>
                    <div class="availibility">
                        @if (Model.InventoryStocks.FirstOrDefault()?.Available > 0)
                        {
                            <span>Availability:</span> <br />
                            @((Model.InventoryStocks.FirstOrDefault().Available <= 10 ? "only " : "") + Model.InventoryStocks.FirstOrDefault().Available.ToString("#") + " items left");
                        }
                        else
                        {
                            <span></span> <br />
                            <span>Currently unavailable.</span>
                        }
                    </div>

                    @foreach (var item in Model.ProductAttributeValuesMap.Where(a => a.IsDeleted != true).OrderBy(m => m.ProductAttributeValues.AttributeId))
                    {
                        <div>
                            <div class="sizeWrap">
                                <p>@Html.Raw(item.ProductAttributeValues.ProductAttributes.AttributeName) : <span>@Html.Raw(item.ProductAttributeValues.Value)</span></p>
                                @if (Model.ProductType == Ganedata.Core.Entities.Enums.ProductKitTypeEnum.ProductByAttribute)
                                {
                                <ul class="size_boxList">
                                    @{
                                        foreach (var attribute in ViewBag.AvailableAttributes[item.ProductAttributeValues.AttributeId])
                                        {

                                            var relatedProducts = Model.ProductKitMap.Where(p => p.ProductMaster.SKUCode != Model.SKUCode &&
                                                                                                        p.IsActive &&
                                                                                                        p.ProductMaster.ProductAttributeValuesMap.Any(m => m.ProductAttributeValues.AttributeId == attribute.AttributeId &&
                                                                                                                                                       m.ProductAttributeValues.AttributeValueId == attribute.AttributeValueId));


                                            if (relatedProducts.Count() > 1)
                                            {
                                                foreach (var currentProductAttribute in Model.ProductAttributeValuesMap.Where(am => am.ProductAttributeValues.AttributeId != attribute.AttributeId))
                                                {
                                                    relatedProducts = relatedProducts.Where(p => p.ProductMaster.ProductAttributeValuesMap.Any(m => m.ProductAttributeValues.AttributeId == currentProductAttribute.ProductAttributeValues.AttributeId &&
                                                                                                                                                       m.ProductAttributeValues.AttributeValueId == currentProductAttribute.AttributeValueId));

                                                    if (relatedProducts.Count() == 1)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }

                                            var isAttributeWithSelection = true;

                                            foreach (var currentProductAttribute in Model.ProductAttributeValuesMap.Where(m => m.ProductAttributeValues.AttributeId != attribute.AttributeId))
                                            {
                                                isAttributeWithSelection = Model.ProductKitMap.Any(m => m.ProductMaster.SKUCode != Model.SKUCode &&
                                                                                                        m.ProductMaster.IsDeleted != true &&
                                                                                                        m.ProductMaster.IsActive == true &&
                                                                                                        m.ProductMaster.ProductAttributeValuesMap.Any(p => p.IsDeleted != true && p.ProductAttributeValues.AttributeId == attribute.AttributeId &&
                                                                                                                    p.ProductAttributeValues.AttributeValueId == attribute.AttributeValueId) &&
                                                                                                        m.ProductMaster.ProductAttributeValuesMap.Any(p => p.IsDeleted != true && p.ProductAttributeValues.AttributeId == currentProductAttribute.ProductAttributeValues.AttributeId &&
                                                                                                                    p.ProductAttributeValues.AttributeValueId == currentProductAttribute.AttributeValueId));
                                            }

                                            var isAttributeActive = attribute.AttributeValueId == item.AttributeValueId;

                                            @Html.Raw("<li class=\"col3 " + (isAttributeActive ? "active" : "") + (!isAttributeActive && !isAttributeWithSelection ? "unavailable-attribute\">" : "\">") +
                                                                     $"<a href=\"ProductDetails?sku={relatedProducts.FirstOrDefault()?.ProductMaster.SKUCode ?? Model.SKUCode}\">" +
                                                                     (item.ProductAttributeValues.ProductAttributes.AttributeName.ToLower().IndexOf("color") == -1 && item.ProductAttributeValues.ProductAttributes.AttributeName.ToLower().IndexOf("colour") == -1 ?
                                                                     "<span>" + attribute.Value + "</span>" :
                                                                     "<span style=\"background-color:" + attribute.Value + ";color:" + attribute.Value + "\">-</span>") +

                                                                 "</a></li>");
                                        }
                                    }
                                </ul>
                                }
                            </div>
                        </div>

                    }

                    <div class="footSec">
                        <div class="qty">
                            <span>quantity</span>
                            <div class="sortBysec">
                                <input id="input-quantity" type="text" name="quantity" value="1" size="2" data-detail="true" class="input-number" />
                            </div>
                        </div>
                        @if (@Model.SellPrice > 0 && @Model.SellPrice.HasValue && @Model.PercentMargin > 0 && Model.InventoryStocks.FirstOrDefault()?.Available > 0)
                        {
                            <button class="addTobasket" onclick="AddToCart(@Model.ProductId)">Add to basket</button>
                        }
                        else
                        {
                            <button class="addTobasket" disabled>
                                Add to basket
                            </button>
                        }
                        <button class="addtowishlistbtn">Add to Wishlist</button>
                        @if (Model.WebsiteWishListItems.Where(u => u.IsDeleted != true).ToList().Count <= 0)
                        {
                            <a href="javascript:;" class="addtowishlist" id="wish_@Model.ProductId" onclick="AddWishListItem(@Model.ProductId)"><i class="icon-love list-icon" style="color:black"></i></a>
                        }
                        else
                        {
                            <a href="javascript:;" class="addtowishlist" id="wish_@Model.ProductId" onclick="RemoveWishListPopUp(@Model.ProductId)"><i class="icon-love list-icon" style="color:red"></i></a>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="nb_prod_bottomdes">
                    <h3 class="head">Description</h3>
                    <p class="content">
                        @Model.Description.
                    </p>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    $(document).ready(function () {

        if ($(window).width() < 768) {
            $("#zoom_01").elevateZoom({
                gallery: "gal01",
                cursor: "pointer",
                galleryActiveClass: "active",
                imageCrossfade: true,
                loadingIcon: "",
                cursor: "crosshair",
                zoomWindowFadeIn: 500,
                zoomWindowFadeOut: 500,
                easing: true,
                zoomWindowWidth: 500,
                zoomWindowHeight: 500,
                responsive: true,
                borderSize: 1,
                destroyContainerOnResize: true,
                zoomWindowOffetx: 50,
                zoomWindowOffety: -25,
                zoomType: "inner",
            });
        } else {
            $("#zoom_01").elevateZoom({
                gallery: "gal01",
                cursor: "pointer",
                galleryActiveClass: "active",
                imageCrossfade: true,
                loadingIcon: "",
                cursor: "crosshair",
                zoomWindowFadeIn: 500,
                zoomWindowFadeOut: 500,
                easing: true,
                zoomWindowWidth: 500,
                zoomWindowHeight: 500,
                responsive: true,
                borderSize: 1,
                destroyContainerOnResize: true,
                zoomWindowOffetx: 50,
                zoomWindowOffety: -25,
                zoomType: "window",
            });
        }
        //pass the images to Fancybox
        $("#zoom_01").bind("click", function (e) {
            var ez = $("#zoom_01").data("elevateZoom");
            $.fancybox(ez.getGalleryList());
            return false;
        });

    });
</script>