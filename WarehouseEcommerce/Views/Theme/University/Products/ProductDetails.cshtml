@using Ganedata.Core.Entities.Domain
@using System.Configuration
@model ProductMaster
@{
    ViewBag.Title = Model.Name + " | " + ViewBag.SiteDescription;
    var Images = ConfigurationManager.AppSettings["ImageFormats"].Split(new char[] { ',' });
}
<section class="nb_sec nb_prdlisting_pgsec product-section">
    <div class="container">
        <div class="breadCrumbtopsec">
            <div class="nb_bread_crumbwrap">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item">
                            <a href="/">Home</a>
                        </li>
                        <li>></li>
                        @if (ViewBag.Category != null && !string.IsNullOrEmpty(ViewBag.Category))
                        {
                            <li class="breadcrumb-item"><a href="@Url.Action("list", "Products", new { category = ViewBag.Category })">@ViewBag.Category</a></li>
                            <li>></li>
                        }
                        @if (ViewBag.SubCategory != null && !string.IsNullOrEmpty(ViewBag.SubCategory))
                        {
                            <li class="breadcrumb-item"><a href="@Url.Action("list", "Products", new { category = ViewBag.SubCategory })">@ViewBag.SubCategory</a></li>
                            <li>></li>
                        }

                        <li class="breadcrumb-item">@ViewBag.BaseProductName</li>
                    </ol>
                </nav>
            </div>
        </div>
        <div class="row">
            <div class="col-md-5 col-lg-5">
                <div class="nb_prd_viewingsecWrap" id="Prod_carr_viewer">
                    <span id="zoomViewTrigger"><i class="icon-search"></i></span>
                    <span class="img_view_area">
                        <img id="zoom_01"
                             src="@(!string.IsNullOrEmpty(Model.DefaultImage?.Trim()) ? ViewBag.BaseFilePath + Model.DefaultImage : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")"
                             data-zoom-image="@(!string.IsNullOrEmpty(Model.DefaultImage?.Trim()) ? ViewBag.BaseFilePath + Model.DefaultImage : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")" />
                    </span>
                    <div class="img_thumb_sliderwrap">
                        <div id="gal01" class="owl-carousel owl-theme nb_imageZoomCarrousle">
                            @foreach (var item in (Model.ProductFiles))
                            {
                                var extension = Path.GetExtension(item.FilePath);
                                <div class="item">
                                    <a href="#" data-image="@(!string.IsNullOrEmpty(item.FilePath) ? ViewBag.BaseFilePath + item.FilePath : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")" data-zoom-image="@(!string.IsNullOrEmpty(item.FilePath) ? ViewBag.BaseFilePath + item.FilePath : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")">
                                        <img id="zoom_01" src="@(!string.IsNullOrEmpty(item.FilePath) ? ViewBag.BaseFilePath + item.FilePath : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")" alt="" />
                                    </a>
                                </div>

                            }

                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-7 col-lg-6 offset-lg-1">
                <div class="nb_prd_det_rightsec">
                    <h2 class="head">@Model.Name</h2>
                    <span class="prd_amnt">@ViewBag.CurrencySymbol@Model.SellPrice</span>
                    <div class="availibility">
                        @{ var stockAvailable = Ganedata.Core.Services.Inventory.GetStockDetailByProductId(Model.ProductId); }
                        @if (stockAvailable > 0)
                        {
                            @*<span>Availability:</span>
                            <br />*@
                            @((stockAvailable <= 10 ? "only "+ stockAvailable.ToString("#") + " items left" : "Available"))
                        }
                        else
                        {
                            <span></span>
                            <br />
                            <span>Currently unavailable.</span>
                        }
                    </div>

                    @if (ViewBag.BaseProductType != Ganedata.Core.Entities.Enums.ProductKitTypeEnum.ProductByAttribute)
                    {
                        foreach (var item in Model.ProductAttributeValuesMap.Where(a => a.IsDeleted != true).OrderBy(m => m.ProductAttributeValues.AttributeId))
                        {
                            <div>
                                <div class="sizeWrap">
                                    <p>@Html.Raw(item.ProductAttributeValues.ProductAttributes.AttributeName) : <span>@Html.Raw(item.ProductAttributeValues.Value)</span></p>
                                </div>
                            </div>
                        }
                    }

                    @if (ViewBag.BaseProductType == Ganedata.Core.Entities.Enums.ProductKitTypeEnum.ProductByAttribute)
                    {
                        foreach (var item in ViewBag.AvailableAttributes)
                        {
                            var attribute = item.Key;
                            var selectedAttributeValue = Model.ProductAttributeValuesMap.FirstOrDefault(a => a.IsDeleted != true && a.ProductAttributeValues.AttributeId == attribute.AttributeId)?.ProductAttributeValues;
                            <div>
                                <div class="sizeWrap">
                                    <p>@Html.Raw(attribute.AttributeName) : <span>@Html.Raw(selectedAttributeValue?.Value)</span></p>
                                    <ul class="size_boxList">
                                        @{
                                            foreach (var attributeValue in item.Value)
                                            {

                                                var relatedProducts = (ViewBag.RelatedProducts as IEnumerable<ProductMaster>).Where(p => p.SKUCode != Model.SKUCode &&
                                                                                                            p.ProductAttributeValuesMap.Any(m => m.IsDeleted != true && m.ProductAttributeValues.AttributeId == attribute.AttributeId &&
                                                                                                                                                 m.ProductAttributeValues.AttributeValueId == attributeValue.AttributeValueId));

                                                if (relatedProducts.Count() > 1)
                                                {
                                                    foreach (var currentProductAttribute in Model.ProductAttributeValuesMap.Where(am => am.IsDeleted != true && am.ProductAttributeValues.AttributeId != attribute.AttributeId))
                                                    {
                                                        var resultQuery = relatedProducts.Where(p => p.ProductAttributeValuesMap.Any(m => m.IsDeleted != true && m.ProductAttributeValues.AttributeId == currentProductAttribute.ProductAttributeValues.AttributeId &&
                                                                                                                                          m.ProductAttributeValues.AttributeValueId == currentProductAttribute.AttributeValueId));

                                                        if (resultQuery.Count() == 1)
                                                        {
                                                            relatedProducts = resultQuery;
                                                            break;
                                                        }

                                                        if (resultQuery.Count() != 0)
                                                        {
                                                            relatedProducts = resultQuery;
                                                        }
                                                    }
                                                }

                                                var isAttributeAvailableWithCurrentSelection = true;

                                                var attribiteStatusCheckQuery = (ViewBag.RelatedProducts as IEnumerable<ProductMaster>).Where(m => m.SKUCode != Model.SKUCode &&
                                                                                                            m.ProductAttributeValuesMap.Any(p => p.IsDeleted != true &&
                                                                                                                                                 p.ProductAttributeValues.AttributeId == attribute.AttributeId &&
                                                                                                                                                 p.ProductAttributeValues.AttributeValueId == attributeValue.AttributeValueId));

                                                foreach (var currentProductAttribute in Model.ProductAttributeValuesMap.Where(m => m.ProductAttributeValues.AttributeId != attribute.AttributeId))
                                                {
                                                    attribiteStatusCheckQuery = attribiteStatusCheckQuery.Where(m => m.ProductAttributeValuesMap.Any(p => p.IsDeleted != true &&
                                                                                                                                                          p.ProductAttributeValues.AttributeId == currentProductAttribute.ProductAttributeValues.AttributeId &&
                                                                                                                                                          p.ProductAttributeValues.AttributeValueId == currentProductAttribute.AttributeValueId));

                                                    isAttributeAvailableWithCurrentSelection = attribiteStatusCheckQuery.Any();
                                                }

                                                var isSelectedAttributeValue = attributeValue.AttributeValueId == selectedAttributeValue?.AttributeValueId;

                                                @Html.Raw("<li class=\"col3 " + (isSelectedAttributeValue ? "active" : "") + (!isSelectedAttributeValue && !isAttributeAvailableWithCurrentSelection ? "unavailable-attribute\">" : "\">") +
                                                                (isSelectedAttributeValue ? "<a>" : $"<a href=\"ProductDetails?sku={ViewBag.BaseProductSKUCode}&productId={relatedProducts.FirstOrDefault()?.ProductId ?? Model.ProductId}\">") +
                                                                (!attributeValue.ProductAttributes.IsColorTyped ?
                                                                                "<span style=\"color:" + (!string.IsNullOrEmpty(attributeValue.Color?.Trim()) ? attributeValue.Color : attributeValue.Value) + "\">" + attributeValue.Value + "</span>" :
                                                                                "<span style=\"background-color:" + (!string.IsNullOrEmpty(attributeValue.Color?.Trim()) ? attributeValue.Color : attributeValue.Value) + ";color:" + (!string.IsNullOrEmpty(attributeValue.Color?.Trim()) ? attributeValue.Color : attributeValue.Value) + "\">-</span>") +
                                                            "</a></li>");
                                            }
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                    }

                <div class="footSec">
                    @if (@Model.SellPrice > 0 && @Model.SellPrice.HasValue && (stockAvailable > 0))
                    {
                        <div class="qty">
                            <span>quantity</span>
                            @Html.DropDownList("product-quantity", Enumerable.Range(1, (int)stockAvailable).Select(i => new SelectListItem { Text = i.ToString(), Value = i.ToString() }), htmlAttributes: new { @class = "form-control" })
                        </div>

                        <button class="addTobasket" onclick="addToCart(@Model.ProductId, document.getElementById('product-quantity').value)">Add to basket</button>
                    }
                    else
                    {
                        var totalwishlistitems = Model.WebsiteWishListItems.FirstOrDefault(u => u.IsDeleted != true && u.UserId == ViewBag.CurrentUserId && u.IsNotification);

                        if (totalwishlistitems == null)
                        {
                            <button class="notify-btn addTobasket btn_notification-bell_@Model.ProductId" onclick="AddWishListItemStockNotAvailable(@Model.ProductId)"><i class="fa fa-bell-o list-icon"></i> NOTIFY ME WHEN AVAILABLE</button>
                            @*<a href="javascript:;" onclick="AddWishListItemStockNotAvailable(@Model.ProductId)" class="addtowishlist list-icon bell-icon notification-bell_@Model.ProductId"><i class="fa fa-bell-o list-icon" style="color:black"></i></a>*@
                        }
                        else
                        {
                            <button class="notify-btn addTobasket btn_notification-bell_@Model.ProductId" onclick="removeNotifyProduct(@Model.ProductId,true)"><i class="fa fa-bell-o list-icon"></i> NOTIFY ME WHEN AVAILABLE</button>
                            @*<a href="javascript:;" onclick="removeNotifyProduct(@Model.ProductId,true)" class="addtowishlist list-icon bell-icon notification-bell_@Model.ProductId"><i class="fa fa-bell-o list-icon" style="color:red"></i></a>*@

                        }

                    }

                    @if (Model.WebsiteWishListItems.FirstOrDefault(u => u.IsDeleted != true && !u.IsNotification) == null)
                    {
                        <button id="btnwish_@Model.ProductId" onclick="AddToWishList(@Model.ProductId,false)" class="addtowishlistbtn">Add to Wishlist</button>
                        <a href="javascript:;" class="addtowishlist " id="wish_@Model.ProductId" onclick="AddToWishList(@Model.ProductId,false)"><i class="icon-love list-icon" style="color:black;font-size:28px"></i></a>
                    }
                    else
                    {
                        <button id="btnwish_@Model.ProductId" onclick="RemoveWishListPopUp(@Model.ProductId,false)" class="addtowishlistbtn">Add to Wishlist</button>
                        <a href="javascript:;" class="addtowishlist" id="wish_@Model.ProductId" onclick="RemoveWishListPopUp(@Model.ProductId,false)"><i class="icon-love list-icon" style="color:red;font-size:28px"></i></a>
                    }
                </div>
                </div>
            </div>
            <div class="col-md-12">
                <div class="nb_prod_bottomdes">
                    <p class="content">
                        @Model.Description
                    </p>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    $(document).ready(function () {
        $("#zoom_01").elevateZoom({
            gallery: "gal01",
            cursor: "pointer",
            galleryActiveClass: "active",
            imageCrossfade: true,
            loadingIcon: "",
            cursor: "crosshair",
            zoomWindowFadeIn: 500,
            zoomWindowFadeOut: 500,
            easing: true,
            zoomWindowWidth: 600,
            zoomWindowHeight: 500,
            responsive: true,
            borderSize: 1,
            destroyContainerOnResize: true,
            zoomWindowOffetx: 50,
            zoomWindowOffety: -25,
            zoomType: "window",
        });

        //pass the images to Fancybox
        $("#zoom_01").bind("click", function (e) {
            var ez = $("#zoom_01").data("elevateZoom");
            $.fancybox(ez.getGalleryList());
            return false;
        });
    });
</script>