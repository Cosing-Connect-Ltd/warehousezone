@using Ganedata.Core.Entities.Domain
@using Ganedata.Core.Entities.Enums
@model PagedList.IPagedList<ProductMaster>
@using PagedList.Mvc;
@{
    var UrlQuery = Request.Url.OriginalString;
    string values = "";
    string SubCategory = "";
    string Manufacturer = "";
    if (UrlQuery.Contains("values="))
    {
        var startindex = UrlQuery.IndexOf("values=");
        var lastindex = UrlQuery.Length - startindex;
        values = UrlQuery.Substring(startindex, lastindex).Replace("values=", "");
        var breadcumbstring = values.Split('/');
        SubCategory = breadcumbstring.FirstOrDefault(u => u.Contains("TypeS-"));
        Manufacturer = breadcumbstring.FirstOrDefault(u => u.Contains("BrandS-"));

    }
}

@Html.Partial("_ProductByAttributeSelectorModal")
@Html.Hidden("valuesParameter", (string)values)
<section class="nb_sec nb_prdlisting_pgsec">
    <span id="res_filterBox_trigger"><i class="icon-filter"></i></span>
    <div class="container">
        <div class="breadCrumbtopsec">
            <div class="nb_bread_crumbwrap">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">

                        <li class="breadcrumb-item">
                            <a href="/">Home</a>
                        </li>
                        <li>></li>
                        @if (ViewBag.Categories != null && !string.IsNullOrEmpty(ViewBag.Categories))
                        {
                            <li class="breadcrumb-item"><a href="@Url.Action("list", "Products", new { category = ViewBag.Categories })">@ViewBag.Categories</a></li>
                        }

                        @if (ViewBag.SubCategory != null && !string.IsNullOrEmpty(ViewBag.SubCategory))
                        {
                            <li>></li>
                            <li class="breadcrumb-item">@ViewBag.SubCategory</li>
                        }
                    </ol>
                </nav>
            </div>
            <div class="sortBy_outer">
                <span class="srtby_txt">Sort By</span>
                <div class="sortBysec">
                    @Html.DropDownList("SortedValues", EnumHelper.GetSelectList(typeof(SortProductTypeEnum)), htmlAttributes: new { @class = "form-control", onchange = "searchPoducts();" })

                </div>
            </div>
        </div>
        <div class="row">
            @Html.Action("_DynamicFilters", new { category = ViewBag.Category, productName = ViewBag.CurrentFilter })
            <div class="col-md-8 col-lg-9 list-on-tablets">
                <div class="nb_prd_listing_wrap">

                    <div class="row list-product-row">
                        @foreach (var item in Model)
                        {


                            item.ProductTagMaps = item.ProductTagMaps.Where(u => u.IsDeleted != true).Where(u => u.ProductTag.IsDeleted != true).OrderBy(x => x.ProductTag.SortOrder).ToList();
                            <div class="col-6 col-xs-6 col-sm-6 col-md-6 col-lg-4 list-product-col">
                                <div class="prd_lst_boxouter">
                                    @for (int i = 0; i < item.ProductTagMaps.Count; i++)
                                    {
                                        if (i < 3)
                                        {
                                            <span class="badge badge-@i">
                                                <img src="@(ViewBag.BaseFilePath + item.ProductTagMaps.ToList()[i].ProductTag.IconImage)" alt="" />
                                            </span>
                                        }

                                    }

                                    <span class="imagewrap">
                                        <a href="@Url.Action("ProductDetails","Products", new {sku=item.SKUCode})">
                                            <img src="@(!string.IsNullOrEmpty(item.DefaultImage) ? ViewBag.BaseFilePath + item.DefaultImage : ViewBag.BaseFilePath + "/UploadedFiles/Products/no_image.gif")" />
                                        </a>
                                    </span>
                                    <h3 class="prdName">
                                        <a class="prdName" href="@Url.Action("ProductDetails","Products", new {sku=item.SKUCode})">
                                            @item.Name
                                        </a>
                                    </h3>
                                    <div class="foot">
                                        <a class="prd_amnt" href="@Url.Action("ProductDetails","Products", new {sku=item.SKUCode})">
                                            @ViewBag.CurrencySymbol@item.SellPrice
                                        </a>
                                        @if (item.ProductType != ProductKitTypeEnum.Grouped && item.ProductType != ProductKitTypeEnum.Kit)
                                        {
                                            <ul class="icolist">
                                                @if (Ganedata.Core.Services.Inventory.IsProductAvailableToSell(@item, ViewBag.SiteId) && item.ProductType != ProductKitTypeEnum.ProductByAttribute)
                                                {
                                                    <li>
                                                        <a href="javascript:;" onclick="addToCart(@item.ProductId)"><i class="cart-icon icon-shopping-cart"></i></a>
                                                    </li>


                                                }
                                                else if (Ganedata.Core.Services.Inventory.IsProductAvailableToSell(@item, ViewBag.SiteId) && item.ProductType == ProductKitTypeEnum.ProductByAttribute)
                                                {
                                                    <li>
                                                        <a href="javascript:;" onclick="showProductByAttributeSelector('@item.SKUCode')"><i class="cart-icon icon-shopping-cart"></i></a>
                                                    </li>
                                                }
                                                else
                                                {
                                                    var isItemInNotifyList = item.WebsiteWishListItems.Any(u => u.IsDeleted != true && u.UserId == ViewBag.CurrentUserId && u.IsNotification);

                                                    if (!isItemInNotifyList)
                                                    {
                                                        <li>
                                                            <a href="javascript:;" onclick="@(item.ProductType != ProductKitTypeEnum.ProductByAttribute ? "addNotifyProductAvailibility(" + item.ProductId + ", false)" : "showProductByAttributeSelector('" + item.SKUCode + "')")" class="notification-bell_@item.ProductId"><i class="bel-icon fa fa-bell-o list-icon" style="color:black"></i></a>
                                                        </li>
                                                    }
                                                    else
                                                    {
                                                        <li>
                                                            <a href="javascript:;" onclick="@(item.ProductType != ProductKitTypeEnum.ProductByAttribute ? "removeNotifyProduct(" + item.ProductId + ", true)" : "showProductByAttributeSelector('" + item.SKUCode + "')")" class="notification-bell_@item.ProductId"><i class="bel-icon fa fa-bell-o list-icon" style="color:red"></i></a>
                                                        </li>

                                                    }


                                                }

                                                @{
                                                    var isItemInWishList = item.WebsiteWishListItems.Any(u => u.IsDeleted != true && u.UserId == ViewBag.CurrentUserId && !u.IsNotification);
                                                }

                                                @if (!isItemInWishList)
                                                {
                                                    <li>
                                                        <a href="javascript:;" id="wish_@item.ProductId" onclick="@(item.ProductType != ProductKitTypeEnum.ProductByAttribute ? "addToWishList(" + item.ProductId + ", false)" : "showProductByAttributeSelector('" + item.SKUCode + "')")"><i class="icon-love list-icon" style="color: black;font-size: 28px;"></i></a>
                                                    </li>
                                                }
                                                else
                                                {
                                                    <li>
                                                        <a href="javascript:;" id="wish_@item.ProductId" onclick="@(item.ProductType != ProductKitTypeEnum.ProductByAttribute ? "removeFromWishListPopUp(" + item.ProductId + ", false)" : "showProductByAttributeSelector('" + item.SKUCode + "')")"><i class="icon-love list-icon" style="color: red;font-size: 28px;"></i></a>
                                                    </li>
                                                }
                                            </ul>
                                        }
                                    </div>
                                </div>
                            </div>
                        }

                        <input type="text" id="currentsortedvalue" value="@(ViewBag.CurrentSort ?? " ")" style="display:none" />
                        <input type="text" id="currentFiltervalue" value="@(ViewBag.CurrentFilter ?? " ")" style="display:none" />
                        <input type="text" id="searchString" value="@(ViewBag.searchString ?? " ")" style="display:none" />

                        <input type="hidden" id="prod-category" value="@ViewBag.Category" />
                    </div>
                    @if (Model.TotalItemCount > Model.PageSize)
                    {
                        <div class="row pagi">
                            <div class="col-sm-6 col-xs-6 text-left pagination">
                                @Html.PagedListPager(Model, page => Url.Action("list", new { sort = ViewBag.CurrentSort, filter = ViewBag.CurrentFilter, page = page, pagesize = Model.PageSize, category = ViewBag.Category, values = values }))
                            </div>
                            <div class="col-sm-6 col-xs-6 text-right tot">
                                @*Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber*@
                                <p>Showing @( Model.FirstItemOnPage) to @Model.PageSize of @(Model.TotalItemCount)</p>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

    </div>
</section>

<script>
    function GetSortedList(e) {
        var sortvalue = parseInt(e.currentTarget.value);

        var groupId = $("#ProductGroups").val();
        if (groupId === "" || groupId === undefined || groupId === null) { groupId = $("#ProductGroupsId").val(); }
        var pagenumber = $("#pagenumber").val();
        var departmentId = $("#departmentId").val();
        var currentFilter = $("#currentFiltervalue").val();
        var searchstring = $("#searchString").val();
        var pageSize = $("#input-limit :selected").val();
        var valuesparam = $("#valuesParameter").val();
        var subCategory = $("#SubCategoryId").val();
        window.location.href = basePath + "/Products/ProductCategories?productGroup=" + groupId + "&sortOrder=" + sortvalue + "&currentFilter=" + currentFilter + "&searchString=" + searchstring + "&page=" + pagenumber + "&pagesize=" + pageSize + "&department=" + departmentId + "&SubCategory=" + subCategory + "&values=" + valuesparam;
    }

    function PageSizeChanges(e) {
        var pageSize = parseInt(e.currentTarget.value);
        var sortvalue = $("#SortedValues").val();
        var groupId = $("#ProductGroups").val();
        if (groupId === "" || groupId === undefined || groupId === null) { groupId = $("#ProductGroupsId").val(); }
        var pagenumber = $("#pagenumber").val();
        var departmentId = $("#departmentId").val();
        var currentFilter = $("#currentFiltervalue").val();
        var searchstring = $("#searchString").val();
        var subCategory = $("#SubCategoryId").val();
        var valuesparam = $("#valuesParameter").val();
        window.location.href = basePath + "/Products/ProductCategories?productGroup=" + groupId + "&sortOrder=" + sortvalue + "&currentFilter=" + currentFilter + "&searchString=" + searchstring + "&page=" + pagenumber + "&pagesize=" + pageSize + "&department=" + departmentId + "&SubCategory=" + subCategory + "&values=" + valuesparam;
    }

</script>