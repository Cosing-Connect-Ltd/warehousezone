<script src="~/Scripts/jscolor.js"></script>
<script src="~/Scripts/Gane.Settings-Bar.js"></script>
@model IList<Ganedata.Core.Models.UISettingViewModel>
@using Ganedata.Core.Entities.Enums

<h3>UI Customization</h3>
@using (Html.BeginForm("", "", FormMethod.Post, new { @id = "frmSettingsBar" }))
{
    @Html.AntiForgeryToken()
    if (Model.Count() == 0)
    {
        <div class="col-md-12 text-center mt-5">No UI customization item available for current theme!</div>
    }
    else
    {
        <div class="settings-bar-content-items">
            @for (int i = 0; i < Model.Count(); i++)
            {
                <div class="w-100">
                    @Html.HiddenFor(m => m[i].Id)
                    @Html.HiddenFor(m => m[i].SiteId)
                    @Html.HiddenFor(m => m[i].UISettingItem.Id)
                    @Html.HiddenFor(m => m[i].UISettingItem.Key)
                    @Html.HiddenFor(m => m[i].UISettingItem.DefaultValue)

                    <label class="col-md-7 float-left">@Model[i].UISettingItem.DisplayName</label>
                    <div class="col-md-5 float-left">
                        @if (Model[i].UISettingItem.InputType != UISettingItemInputType.Font) {
                            @Html.TextBoxFor(m => m[i].Value, new { @type = (Model[i].UISettingItem.InputType == UISettingItemInputType.Color ? "Text" : Enum.GetName(typeof(UISettingItemInputType), Model[i].UISettingItem.InputType)),
                                                                    @class = Model[i].UISettingItem.InputType == UISettingItemInputType.Color ? "jscolor {hash:true, padding:4, zIndex:9999} form-control" : "form-control",
                                                                    @onchange = "onUISettingChanged(this)",
                                                                    data_settingsKey = Model[i].UISettingItem.Key})
                        }
                        else
                        {
                            @Html.DropDownListFor(m => m[i].Value, new SelectList(Enum.GetValues(typeof(UISettingFonts)).Cast<UISettingFonts>().Select(v => new { Value = v.ToString() }).ToList(), "Value", "Value", Model[i].Value),
                                                                    new { @class = "chosen-select form-control",
                                                                            @onchange = "onUISettingChanged(this)",
                                                                            data_settingsKey = Model[i].UISettingItem.Key
                                                                        })
                        }
                    </div>

                    @Html.ValidationMessageFor(model => model[i].Value, "The " + Model[i].UISettingItem.DisplayName + " field value is required.", new { @class = "col-md-12 text-danger" })
                </div>
            }
        </div>


        <div class="settings-bar-buttons">
            <input type="button" onclick='saveUISettings();' value="Save" class="btn btn-primary" />
            <input type="button" value="Default" onclick="setDefaultValues();" class="btn btn-default" />
            <input type="button" value="Cancel" onclick="cancelChanges();" class="btn btn-default" />
        </div>
    }
}
