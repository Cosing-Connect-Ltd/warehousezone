@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        var gridname = "ProductEditListGridView";
        if (ViewBag.AssociatedItem != null)
        {
            if (ViewBag.KitTypes != null && ViewBag.KitTypes == Ganedata.Core.Entities.Enums.ProductKitTypeEnum.RelatedProduct)
            {
                gridname = "RelatedProductListGridView";
            }
        }

        settings.Name = gridname;
        settings.CallbackRouteValues = new
        {
            Controller = "Products",
            Action = "_EditableProductGrid",
            gridName = gridname,
            AssociatedItem = ViewBag.AssociatedItem,
            KitType = ViewBag.KitTypes,
            productId = ViewBag.ProductId
        };

        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
        settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
        settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.DblClick;
        settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
        settings.EnableCallbackAnimation = false;
        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Paging,
            new { Controller = "Products", Action = "_ProductEditListPaging", gridName = gridname, AssociatedItem = ViewBag.AssociatedItem, KitType = ViewBag.KitTypes, productId = ViewBag.ProductId }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Filtering,
        new { Controller = "Products", Action = "_ProductsEditFiltering", gridName = gridname, AssociatedItem = ViewBag.AssociatedItem, KitType = ViewBag.KitTypes, productId = ViewBag.ProductId }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Sorting,
        new { Controller = "Products", Action = "_ProductsEditGetDataSorting", gridName = gridname, AssociatedItem = ViewBag.AssociatedItem, KitType = ViewBag.KitTypes, productId = ViewBag.ProductId }
        );

        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.KeyFieldName = "ProductId";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = false;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;
        if (ViewBag.AssociatedItem == null)
        {
            settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Products", Action = "SaveProductEdit" };
            settings.Columns.Add(c =>
            {
                c.FieldName = "Name";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                c.EditFormSettings.Visible = DefaultBoolean.False;
                c.EditorProperties().TextBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnTagDetailsChanged(s,e);}";

                });
                c.EditFormSettings.Visible = DefaultBoolean.True;

            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "SKUCode";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                c.EditFormSettings.Visible = DefaultBoolean.False;
                c.EditorProperties().TextBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnTagDetailsChanged(s,e);}";

                });
                c.EditFormSettings.Visible = DefaultBoolean.True;
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "Serialisable";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditFormSettings.Visible = DefaultBoolean.True;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnTagDetailsChanged(s,e);}";

                });
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "ProcessByPallet";
                c.Caption = "Palletable";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditFormSettings.Visible = DefaultBoolean.True;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnTagDetailsChanged(s,e);}";

                });

            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "TagIds";
                c.Caption = "Tags";
                c.Width = System.Web.UI.WebControls.Unit.Percentage(15);
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.Settings.AllowSort = DefaultBoolean.False;
                c.ColumnType = MVCxGridViewColumnType.TokenBox;
                c.EditorProperties().TokenBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnTagDetailsChanged(s,e);}";

                });
                var tokenBoxSettings = c.PropertiesEdit as TokenBoxProperties;
                if (tokenBoxSettings != null)
                {
                    tokenBoxSettings.TextField = "TagName";
                    tokenBoxSettings.ValueField = "Id";
                    tokenBoxSettings.ShowDropDownOnFocus = ShowDropDownOnFocusMode.Always;
                    tokenBoxSettings.AllowCustomTokens = false;
                    tokenBoxSettings.IncrementalFilteringMode = IncrementalFilteringMode.Contains;
                    tokenBoxSettings.DataSource = ViewBag.Tags;
            //tokenBoxSettings.ItemValueType = typeof(Int32);
            tokenBoxSettings.Width = 300;
                }
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "PercentMargin";
                c.ColumnType = MVCxGridViewColumnType.SpinEdit;
                c.EditorProperties().SpinEdit(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnTagDetailsChanged(s,e);}";

                });
                c.EditFormSettings.Visible = DefaultBoolean.True;

            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "BuyPrice";
                c.ColumnType = MVCxGridViewColumnType.SpinEdit;
                c.EditorProperties().SpinEdit(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnTagDetailsChanged(s,e);}";

                });
                c.EditFormSettings.Visible = DefaultBoolean.True;
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "SellPrice";
                c.ColumnType = MVCxGridViewColumnType.SpinEdit;
                c.EditorProperties().SpinEdit(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnTagDetailsChanged(s,e);}";
                });
                c.EditFormSettings.Visible = DefaultBoolean.True;
            });
            settings.Columns.Add(c =>
            {
                c.FieldName = "LandedCost";
                c.ColumnType = MVCxGridViewColumnType.SpinEdit;
                c.EditorProperties().SpinEdit(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnTagDetailsChanged(s,e);}";

                });
                c.EditFormSettings.Visible = DefaultBoolean.True;

            });
            settings.CellEditorInitialize = (s, e) =>
            {
                ASPxEdit editor = (ASPxEdit)e.Editor;
                editor.ValidationSettings.Display = Display.None;
            };

            settings.ClientSideEvents.BeginCallback = "function(s,e){ OnBeginEditGridCallback(s, e); }";
            settings.ClientSideEvents.FocusedCellChanging = "OnEditGridFocusChanged";
            settings.ClientSideEvents.EndCallback = "OnEndEditGridCallback";
            settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
        }
        else
        {
            settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Products", Action = "SaveAssociated", gridName = gridname, AssociatedItem = ViewBag.AssociatedItem, KitType = ViewBag.KitTypes };
            settings.Columns.Add(c =>
            {
                c.FieldName = "Name";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                c.EditFormSettings.Visible = DefaultBoolean.False;
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "SKUCode";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                c.EditFormSettings.Visible = DefaultBoolean.False;
            });

            settings.Columns.Add(column =>
            {
                column.Caption = "Attributes";
                column.Name = "AttributeValues";
                column.EditFormSettings.Visible = DefaultBoolean.False;
                column.SetDataItemTemplateContent(container =>
                {
                    List<string> type = DataBinder.Eval(container.DataItem, "AttributeValueNames") as List<string>;

                    if (type != null && type.Count() > 0)
                    {
                        var listSplit = type.Select(u => u.Split(':')).ToList();
                        Dictionary<string, string>
                    data = new Dictionary<string, string>
                        ();
                        foreach (var item in listSplit)
                        {
                            if (!data.ContainsKey(item[0].ToString()))
                            {
                                data.Add(item[0], item[1]);
                            }
                            else
                            {
                                var value = data[item[0].ToString()];
                                data[item[0].ToString()] = value + ", " + item[1];

                            }

                        }
                        var attributes = String.Join(", ", data.Select(d => String.Format("{0}:{1}", d.Key, d.Value)));
                        ViewContext.Writer.Write(attributes);

                    }

                });
            });

            if (ViewBag.KitTypes != Ganedata.Core.Entities.Enums.ProductKitTypeEnum.Grouped && ViewBag.KitTypes != Ganedata.Core.Entities.Enums.ProductKitTypeEnum.ProductByAttribute && ViewBag.KitTypes != Ganedata.Core.Entities.Enums.ProductKitTypeEnum.RelatedProduct)
            {
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Qty";
                    c.Caption = "Qty";
                    c.ColumnType = MVCxGridViewColumnType.SpinEdit;
                    c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
                    c.EditorProperties().SpinEdit(p =>
                    {
                        p.MinValue = 0;
                        p.MaxValue = 1000000000;

                        p.ClientSideEvents.LostFocus = string.Format("function(s,e){{ OnDetailsChanged(s,e,{0}); }}", gridname);
                    });
                });
            }
            else if (ViewBag.KitTypes == Ganedata.Core.Entities.Enums.ProductKitTypeEnum.Grouped)
            {
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Id";
                    c.Caption = "Kit Type";
                    c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                    c.EditorProperties().ComboBox(p =>
                    {
                        p.ValueField = "Id";
                        p.TextField = "Name";
                        p.ValueType = typeof(Int32);
                        p.DataSource = (List<Ganedata.Core.Entities.Domain.ProductKitType>)ViewBag.GetKitTypes;
                        p.ClientSideEvents.ValueChanged = string.Format("function(s,e){{ OnDetailsChanged(s,e,{0}); }}", gridname);
                    });

                });
            }


            settings.Columns.Add(c =>
            {
                c.FieldName = "IsActive";
                c.Caption = "Active";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.ValueChanged = string.Format("function(s,e){{ OnDetailsChanged(s,e,{0}); }}", gridname);
                    p.ValidationSettings.Display = Display.Dynamic;
                    p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                });

            });

            settings.ClientSideEvents.BeginCallback = "function(s,e){ OnBeginGridCallback(s, e); }";
            settings.ClientSideEvents.FocusedCellChanging = "OnSpecialPricesGridFocusChanged";
            settings.ClientSideEvents.EndCallback = "OnEndGridCallback";

        }



        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };

    });
}

@grid.BindToCustomData(Model).GetHtml()
