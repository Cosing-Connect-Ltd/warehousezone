@using Ganedata.Core.Entities.Helpers
@section scripts {

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.GridView, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DataView, Theme = GaneStaticAppExtensions.DevexTheme }
        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.GridView },
        new Script { ExtensionType = ExtensionType.DataView }
        )
}

@{
    ViewBag.Title = "Products List";
}
<h2><span>Products List</span></h2>

<script type="text/javascript">
    function OnDetailRowExpanding(s, e) {
        s.SetFocusedRowIndex(e.visibleIndex);
        return false;
    }
    function OnGridFocusedRowChanged(s, e) {
        var name = s.name;
        if (name.indexOf("ProductListGridView") >= 0) {
            $('#selkeyProductList').val(s.GetRowKey(s.GetFocusedRowIndex()));
        }
        else {
            $('.selkey').val(s.GetRowKey(s.GetFocusedRowIndex()));
        }
    }

</script>
<script type="text/javascript">

    //MVCxClientGlobalEvents.AddControlsInitializedEventHandler(OnBeginGridCallback);

    function OnBeginGridCallback(s, e, gridName) {
        e.customArgs = MVCxClientUtils.GetSerializedEditorValuesInContainer("frmProductFileDetail");
        var grid = ASPxClientControl.GetControlCollection().GetByName(gridName.name);
        var rowIndex = parseInt($("#RowIndexForProductId").val()) || 0;
        e.customArgs["Id"] = grid.GetRowKey(rowIndex);
        var arr = gridName.name.split("_");
        e.customArgs["ProductId"] = arr[1];
    }

    function OnDetailsChanged(s, e, gridName) {
        var grid = ASPxClientControl.GetControlCollection().GetByName(gridName.name);
        grid.UpdateEdit();
    }

</script>


@Html.Hidden("selkey", null, new { @class = "selkey" })
@Html.Hidden("selkeyProductList", null)

@Html.Action("ProductList")

<div class="col-md-offset-2 col-md-10 bottom-right">
    <a href="javascript:void(0)" class="btn btn-primary" onclick="showPrintProductLabelPopup($('#selkeyProductList').val(), 0)">Print Label</a>
    @if (WMS.Helpers.LayoutHelpers.ActivityValidator("Products", "Create"))
    {
        @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-primary  " })
    }
    @if (WMS.Helpers.LayoutHelpers.ActivityValidator("Products", "Edit"))
    {
        @Html.ActionLink("Update", "Edit", null, new { @class = "btn btn-primary  Caction", @id = "lnkProductUpdate" })
    }
    @if (WMS.Helpers.LayoutHelpers.ActivityValidator("Products", "Delete"))
    {
        @Html.ActionLink("Delete", "Delete", null, new { @class = "btn btn-primary  Caction", @id = "lnkProductUpdate" })
    }
    @if (WMS.Helpers.LayoutHelpers.ActivityValidator("InventoryStocks", "InventoryAdjustments"))
    {
        @Html.ActionLink("Adjust Stock", "InventoryAdjustments", "InventoryStocks", null, new { @class = "btn btn-primary  Caction", @id = "lnkProductUpdate" })
    }

</div>