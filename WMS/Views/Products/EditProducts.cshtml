
@{
    ViewBag.Title = "EditProducts";
}
@using Ganedata.Core.Entities.Helpers
@section scripts {

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.GridView, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DataView, Theme = GaneStaticAppExtensions.DevexTheme }
        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.GridView },
        new Script { ExtensionType = ExtensionType.DataView }
        )
}

@{
    ViewBag.Title = "Products List";
}
<h2><span>Edit Products</span></h2>


<script type="text/javascript">

    MVCxClientGlobalEvents.AddControlsInitializedEventHandler(OnBeginGridCallback);

    function OnBeginGridCallback(s, e) {

        debugger;
        e.customArgs = MVCxClientUtils.GetSerializedEditorValuesInContainer("frmEditProducts");
        //WORKAROUND for BULK Update
        var gridValues = JSON.parse(JSON.stringify($("#frmEditProducts").serializeArray()));
        var values = gridValues[gridValues.length - 1].value.split(',');

        for (var i = 0; i < gridValues.length - 1; i++) {
            if (gridValues[i].name == 'ProductEditListGridView$DXEditor2') {
                e.customArgs["SpecialPrice"] = gridValues[i].value;
            }
            if (gridValues[i].name == 'ProductEditListGridView$DXEditor3') {
                e.customArgs["StartDate"] = gridValues[i].value;
            }
            if (gridValues[i].name == 'ProductEditListGridView$DXEditor4') {
                e.customArgs["EndDate"] = gridValues[i].value;
            }
        }

        var rowIndex = parseInt($("#RowIndexForProductId").val()) || 0;

        e.customArgs["ProductID"] = ProductEditListGridView.GetRowKey(rowIndex);
    }

    function OnEndGridCallback(s, e) {
        var lastIndex = parseInt($("#LastEditingRowIndex").val()) || 0;
        SetGridEditorToRowIndex(lastIndex);
    }

    function SetGridEditorToRowIndex(index) {
        ProductEditListGridView.batchEditApi.StartEdit(index, ProductEditListGridView.GetColumnByField($("#LastEditingColIndex").val()).index);
    }

    function OnDetailsChanged(s, e) {
        ProductEditListGridView.UpdateEdit();
    }

    function OnSpecialPricesGridFocusChanged(s, e) {

        if (e.cellInfo.rowVisibleIndex > 0) {

            $("#LastEditingRowIndex").val(e.cellInfo.rowVisibleIndex);
        }

        $("#RowIndexForProductId").val(e.cellInfo.rowVisibleIndex);
        $("#LastEditingColIndex").val(e.cellInfo.column.fieldName);
    }

</script>

@using (Html.BeginForm("SaveProductEdit", "Products", FormMethod.Post, new { @id = "frmEditProducts" }))
{
    @Html.AntiForgeryToken()
    @Html.Hidden("LastEditingRowIndex")
    @Html.Hidden("LastEditingColIndex")
    @Html.Hidden("RowIndexForProductId")

    <div class="input-group h-100 justify-content-center align-items-center">
        @Html.Action("_EditableProductGrid")
    </div>
}