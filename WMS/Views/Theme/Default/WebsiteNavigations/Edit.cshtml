@model Ganedata.Core.Entities.Domain.WebsiteNavigation
@using Ganedata.Core.Entities.Helpers
@{
    ViewBag.Title = "Create Navigation";

}
@section scripts {

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.SpinEdit, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DateEdit, Theme = GaneStaticAppExtensions.DevexTheme },
         new StyleSheet { ExtensionType = ExtensionType.UploadControl, Theme = GaneStaticAppExtensions.DevexTheme },
         new StyleSheet { ExtensionType = ExtensionType.GridView, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DataView, Theme = GaneStaticAppExtensions.DevexTheme }
        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.SpinEdit },
        new Script { ExtensionType = ExtensionType.DateEdit },
          new Script { ExtensionType = ExtensionType.UploadControl },
           new Script { ExtensionType = ExtensionType.GridView },
        new Script { ExtensionType = ExtensionType.DataView }

        )
}


@{
    ViewBag.Title = "Edit Navigation Website";
    var dictonary = (Dictionary<string, string>)ViewBag.Files;

}
<script type="text/javascript">

    function onFileUploadComplete(s, e) {
        if (e.callbackData) {
            $("#dvfiles").show();
            var fileData = e.callbackData.split('|');
            var Fileobj = { FileName: fileData };
            var result = $("#uploaderdefaultImage").tmpl(Fileobj);
            $("#dvfiles").append(result);
            $('.se-pre-con').hide();
            $("#FileLength").val('True');
        }
    }

    function onFileUploadHoverComplete(s, e) {
        if (e.callbackData) {
            $("#dvfilesHover").show();
            var fileData = e.callbackData.split('|');
            var Fileobj = { FileName: fileData };
            var result = $("#uploaderHoverImage").tmpl(Fileobj);
            $("#dvfilesHover").append(result);
            $('.se-pre-con').hide();
            $("#FileLengthHover").val('True');
        }
    }

    function onFileUploadStart(s, e) {
        if ($("#FileLength").val() == 'True') {
            e.cancel = true;
            alert("Only one file allow to be select");
            return;
        }
    }

    function onFileUploadHoverStart(s, e) {
        if ($("#FileLengthHover").val() == 'True') {
            e.cancel = true;
            alert("Only one file allow to be select");
            return;
        }
    }

    MVCxClientGlobalEvents.AddControlsInitializedEventHandler(OnBeginGridCallback);

    function OnBeginGridCallback(s, e) {
        debugger;
        e.customArgs = MVCxClientUtils.GetSerializedEditorValuesInContainer("frmPriceGroupPrices");
        var rowIndex = parseInt($("#RowIndexForProductId").val()) || 0;
        e.customArgs["ProductID"] = ProductWebNavGridView.GetRowKey(rowIndex);
    }

    function OnEndGridCallback(s, e) {
        debugger;
        var lastIndex = parseInt($("#LastEditingRowIndex").val()) || 0;
        SetGridEditorToRowIndex(lastIndex);
    }

    function SetGridEditorToRowIndex(index) {
        ProductWebNavGridView.batchEditApi.StartEdit(index, ProductWebNavGridView.GetColumnByField($("#LastEditingColIndex").val()).index);
    }

    function OnDetailsChanged(s, e) {
        debugger;
        ProductWebNavGridView.UpdateEdit();
    }

    function OnSpecialPricesGridFocusChanged(s, e) {
        if (e.cellInfo.rowVisibleIndex >= 0) {
            $("#LastEditingRowIndex").val(e.cellInfo.rowVisibleIndex);
        }

        $("#RowIndexForProductId").val(e.cellInfo.rowVisibleIndex);
        $("#LastEditingColIndex").val(e.cellInfo.column.fieldName);
    }

</script>

<script>
    $(document).ready(function () {

        $(".navigation-type").on("change", function () {
            var typeId = $("#Type :selected").val();
            if (typeId == "1") {
                $(".showcontentpage").hide();
                $(".ProductsShow").hide();
            }
            else if (typeId == "2") {
                $(".showcontentpage").show();
                $(".ProductsShow").hide();
            }
            else if (typeId == "3") {

                $(".showcontentpage").hide();
                $(".ProductsShow").show();
            }
        });
    });


</script>
<h2><span>Edit Website Navigation  (@ViewBag.SiteName)</span></h2>
@Html.Hidden("hdPFiles", (Dictionary<string, string>)ViewBag.Files)
@using (Html.BeginForm("Edit", "WebsiteNavigations", FormMethod.Post, new { @class = "form-navigation" }))
{
    @Html.AntiForgeryToken()

    @Html.Hidden("LastEditingRowIndex")
    @Html.Hidden("LastEditingColIndex")
    @Html.Hidden("RowIndexForProductId")

    @Html.HiddenFor(model => model.SelectedProductIds)
    @Html.Hidden("ProductsWithIds")
    @Html.HiddenFor(model => model.SiteID)
    <div class="col-md-12">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="col-md-4 p-0 pull-left mb-2">
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.ParentId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.ParentId, ViewBag.ParentIds as SelectList, "Select Parent", htmlAttributes: new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EnumDropDownListFor(model => model.Type, "Select Type", htmlAttributes: new { @class = "form-control navigation-type" })
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center showcontentpage" style="@(Model.Type==Ganedata.Core.Entities.Enums.WebsiteNavigationType.Content?"":"display:none;")">
                @Html.LabelFor(model => model.ContentPageId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.ContentPageId, ViewBag.contentId as SelectList, "Select Content Page", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ContentPageId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.SortOrder, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SortOrder, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SortOrder, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.ShowInNavigation, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ShowInNavigation)
                        @Html.ValidationMessageFor(model => model.ShowInNavigation, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.ShowInFooter, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.ShowInFooter)
                        @Html.ValidationMessageFor(model => model.ShowInFooter, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.Label("Default Image", new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.Action("_Uploader", new { Name = "ImageDefault" })
                    @Html.Hidden("FileLength", (bool?)ViewBag.FileLength)
                    <br />
                    <div id="dvfiles">

                        <strong>Uploaded Files</strong>
                        @if (dictonary != null && !string.IsNullOrEmpty(Model.Image))
                        {
                            var value = dictonary.FirstOrDefault(u => u.Key == "Default").Value;

                            <table>
                                <tr>
                                    <td id="tdProductfileName">@value</td>
                                    <td>
                                        <p>&nbsp;</p>
                                    </td>
                                    <td><a class="LRemove" onclick="_RemoveDefaultFile('@value')">Remove</a></td>
                                    <td>
                                        <p>&nbsp;</p>
                                    </td>

                                </tr>
                            </table>
                        }
                    </div>
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.ImageAltTag, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.ImageAltTag, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ImageAltTag, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.Label("Hover Image", new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.Action("_HoverUploader", new { Name = "HoverImage" })
                    @Html.Hidden("FileLengthHover", (bool?)ViewBag.FileLengthHover)
                    <br />
                    <div id="dvfilesHover">

                        <strong>Uploaded Files</strong>
                        @if (dictonary != null && !string.IsNullOrEmpty(Model.HoverImage))
                        {
                            var value = dictonary.FirstOrDefault(u => u.Key == "Hover").Value;

                            <table>
                                <tr>
                                    <td id="tdProductfileName">@value</td>
                                    <td>
                                        <p>&nbsp;</p>
                                    </td>
                                    <td><a class="LRemove" onclick="_RemoveHoverFile('@value')">Remove</a></td>
                                    <td>
                                        <p>&nbsp;</p>
                                    </td>

                                </tr>
                            </table>
                        }
                    </div>
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.HoverImageAltTag, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.HoverImageAltTag, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.HoverImageAltTag, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="col-md-8 p-0 pull-left mb-2">
            <div class="ProductsShow" style=@(Model.Type==Ganedata.Core.Entities.Enums.WebsiteNavigationType.Category?"":"display:none;")>
                @Html.Action("_NavigationProductList", new { SiteId = Model.SiteID, NavigationId = Model.Id })
            </div>
        </div>


    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        <div class="col-md-offset-2 col-md-10 bottom-right">
            <input type="submit" class="btn btn-primary" value="Save" />
            <div class="back-list">@Html.ActionLink("Back to List", "Index", new { SiteId = Model.SiteID }, new { @class = "btn btn-default" })</div>
        </div>
    </div>

}
<script id="uploaderdefaultImage" type="text/x-jquery-tmpl">
    <tr>
        <td id="tdfileName">${FileName}</td>
        <td><p>&nbsp;</p></td>
        <td><a class="LRemove" onclick="_RemoveDefaultFile('${FileName}')">Remove</a></td>

    </tr>
</script>
<script id="uploaderHoverImage" type="text/x-jquery-tmpl">
    <tr>
        <td id="tdfileName">${FileName}</td>
        <td><p>&nbsp;</p></td>
        <td><a class="LRemove" onclick="_RemoveHoverFile('${FileName}')">Remove</a></td>

    </tr>
</script>
