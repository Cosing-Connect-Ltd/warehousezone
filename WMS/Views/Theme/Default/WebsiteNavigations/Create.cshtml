@model Ganedata.Core.Entities.Domain.WebsiteNavigation
@using Ganedata.Core.Entities.Helpers
@{
    ViewBag.Title = "Create Navigation";
    Layout = null;
}


@{
    ViewBag.Title = "Add Navigation for Website";
}
<script type="text/javascript">
    function onFileUploadComplete(s, e) {
        if (e.callbackData) {
            $("#dvfiles").show();
            var fileData = e.callbackData.split('|');
            var Fileobj = { FileName: fileData };
            var result = $("#uploaderTenantDept").tmpl(Fileobj);
            $("#dvfiles").append(result);
            $('.se-pre-con').hide();
            $("#FileLength").val('True');

        }


    }
    function onFileUploadStart(s, e) {
        if ($("#FileLength").val() == 'True') {
            e.cancel = true;
            alert("Only one file allow to be select");
            return;
        }
        e.CustomArgument
    }
</script>
<script>
    $(document).ready(function () {

        $("#Type").on("change", function () {
            var typeId = $("#Type :selected").val();
            if (typeId == "1") {
                $(".showcontentpage").hide();
                $(".ProductsShow").hide();
            }
            else if (typeId == "2") {
                $(".showcontentpage").show();
                $(".ProductsShow").hide();
            }
            else if (typeId == "3") {

                $(".showcontentpage").hide();
                $(".ProductsShow").show();

            }


        });
    });


    function SelectionChangeds(s, e) {
        debugger;
        s.GetSelectedFieldValues("ProductId", GetSelectedFieldValuesCallback);
    }


    function GetSelectedFieldValuesCallback(values) {
        $("#SelectedProductIds").val(values.join());
    }
    var command;
    function OnStartCallback(s, e) {
        command = e.command;

    }
    function OnGridEndCallBack(s, e) {
        if (command == "REFRESH") {
            s.UnselectRows();
        }
    }

</script>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.SelectedProductIds)
    @Html.HiddenFor(model => model.SiteID, (int)ViewBag.siteid)
    <div class="col-md-12">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="col-md-5 p-0 pull-left mb-2">
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.ParentId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.ParentId, ViewBag.ParentId as SelectList, "Select Parent", htmlAttributes: new { @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.ParentId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EnumDropDownListFor(model => model.Type, "Select Type", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center showcontentpage" style="display:none">
                @Html.LabelFor(model => model.ContentPageId, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DropDownListFor(model => model.ContentPageId, ViewBag.contentId as SelectList, "Select Content Page", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ContentPageId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.SortOrder, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.SortOrder, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SortOrder, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.Label("Default Image", new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.Action("_Uploader", new {Name= "ImageDefault" })
                    @Html.Hidden("FileLength", (bool?)ViewBag.FileLength)
                    <br />
                    <div id="dvfiles">

                        <strong>Uploaded Files</strong>
                    </div>
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.ImageAltTag, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.ImageAltTag, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ImageAltTag, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.Label("Hover Image", new { @class = "col-md-4" })
                <div class="col-md-8">
                    @Html.Action("_Uploader", new { Name="HoverImage"})
                    @Html.Hidden("FileLength", (bool?)ViewBag.FileLength)
                    <br />
                    <div id="dvfiles">

                        <strong>Uploaded Files</strong>
                    </div>
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.HoverImageAltTag, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.HoverImageAltTag, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.HoverImageAltTag, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="col-md-7 p-0 pull-left mb-2">
            <div class="ProductsShow" style="display:none;">
                @Html.Action("_NavigationProductList")
            </div>
        </div>


    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        <div class="col-md-offset-2 col-md-10 bottom-right">
            <input type="submit" value="Create" class="btn btn-primary" />
            <div class="back-list">@Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })</div>
        </div>
    </div>

}
<script id="uploaderTenantDept" type="text/x-jquery-tmpl">
    <tr>
        <td id="tdfileName">${FileName}</td>
        <td><p>&nbsp;</p></td>
        <td><a class="LRemove" onclick="_RemoveLogoFile('${FileName}')">Remove</a></td>

    </tr>
</script>
