@model Ganedata.Core.Entities.Domain.WebsiteDiscountCodes
@using Ganedata.Core.Entities.Helpers
@{
    ViewBag.Title = "Create Discount";

}
@section scripts {

    @Html.DevExpress().GetStyleSheets(
         new StyleSheet { ExtensionType = ExtensionType.GridView, Theme = GaneStaticAppExtensions.DevexTheme }

        )

    @Html.DevExpress().GetScripts(
           new Script { ExtensionType = ExtensionType.GridView }

        )
}


@{
    ViewBag.Title = "Edit Website Discount Code";
}

<script>

    function submitformNav() {
        debugger;
        var productids = $("#SelectedProductIds").val();
        if (productids == null || productids == "" || productids == undefined) {
            alert("Select product first");
            return false;
        }
        else {

            $("#ProductsWithIds").val(productids);
        }


    }
    function SelectionChangeds(s, e) {
        s.GetSelectedFieldValues("ProductId", GetSelectedFieldValuesCallback);
    }
    function GetSelectedFieldValuesCallback(values) {
        $("#SelectedProductIds").val(values.join());
    }
    var command;
    function OnStartCallback(s, e) {
        command = e.command;

    }
    function OnGridEndCallBack(s, e) {
        if (command == "REFRESH") {
            s.UnselectRows();
        }
    }

</script>
<h2><span>Edit Website Discount Code</span></h2>

@using (Html.BeginForm("Edit", "WebsiteDiscountCodes", FormMethod.Post, new { @class = "form-navigation", onsubmit = "return submitformNav()" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.SelectedProductIds)
    @Html.Hidden("ProductsWithIds")
    @Html.HiddenFor(model => model.SiteID)

    <div class="col-md-12">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="col-md-5 pull-left">
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DevExpress().DateEditFor(m => m.FromDate,
                         settings =>
                         {
                             settings.Name = "FromDate";
                             settings.Properties.DisplayFormatString = "dd/MM/yyyy";
                             settings.ClientVisible = true;
                             settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                             settings.ControlStyle.CssClass = "form-control";
                             settings.Properties.ClientSideEvents.GotFocus = "function(s, e) { s.ShowDropDown(); }";

                         }
                         ).Bind(DateTime.UtcNow).GetHtml()
                    @Html.ValidationMessageFor(model => model.FromDate)
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.DevExpress().DateEditFor(m => m.ToDate,
                         settings =>
                         {
                             settings.Name = "ToDate";
                             settings.Properties.DisplayFormatString = "dd/MM/yyyy";
                             settings.ClientVisible = true;
                             settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                             settings.ControlStyle.CssClass = "form-control";
                             settings.Properties.ClientSideEvents.GotFocus = "function(s, e) { s.ShowDropDown(); }";

                         }
                         ).Bind(DateTime.UtcNow).GetHtml()
                    @Html.ValidationMessageFor(model => model.FromDate)
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.DiscountType, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EnumDropDownListFor(model => model.DiscountType, "Select Discount Type", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.DiscountType, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.MinimumBasketValue, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.MinimumBasketValue, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MinimumBasketValue, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.DiscountPercent, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.DiscountPercent, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DiscountPercent, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.FreeShippig, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.FreeShippig)
                        @Html.ValidationMessageFor(model => model.FreeShippig, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.SingleUse, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.SingleUse)
                        @Html.ValidationMessageFor(model => model.SingleUse, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="input-group h-100 justify-content-center align-items-center">
                @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-4" })
                <div class="col-md-8">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.IsActive)
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-7 pull-left">

            @Html.Action("_WebsiteDiscountCodesProductList", new { SiteId = Model.SiteID, DiscountId=Model.Id })

        </div>


    </div>
    <div class="input-group h-100 justify-content-center align-items-center">
        <div class="col-md-offset-2 col-md-10 bottom-right">
            <input type="submit" class="btn btn-primary" value="Create" />
            <div class="back-list">@Html.ActionLink("Back to List", "Index", new { SiteId = Model.SiteID }, new { @class = "btn btn-default" })</div>
        </div>
    </div>

}

