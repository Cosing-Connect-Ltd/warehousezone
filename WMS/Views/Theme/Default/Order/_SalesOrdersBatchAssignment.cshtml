@using System.Web.UI.WebControls
@using Ganedata.Core.Entities.Enums
@using Ganedata.Core.Entities.Helpers

@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = ViewBag.name;
        settings.CallbackRouteValues = new { Controller = "Order", Action = "_SalesOrders", type = ViewBag.Type, pickerId = ViewBag.PickerId };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Paging,
            new { Controller = "Order", Action = "_SalesOrdersPaging", @type = ViewBag.type, pickerId = ViewBag.PickerId }
            );

        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Filtering,
            new { Controller = "Order", Action = "_SalesOrdersFiltering", @type = ViewBag.type, pickerId = ViewBag.PickerId }
            );

        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Sorting,
            new { Controller = "Order", Action = "_SalesOrdersSorting", @type = ViewBag.type, pickerId = ViewBag.PickerId }
            );

        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.ClientSideEvents.SelectionChanged = "SelectionChanged";
        settings.KeyFieldName = "OrderID";
        settings.SettingsPager.Visible = true;
        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowSelectCheckbox = true;
        settings.CommandColumn.SelectAllCheckboxMode = GridViewSelectAllCheckBoxMode.AllPages;

        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = false;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsPager.PageSize = 10;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderID";
            c.Caption = "Order Id";
            c.Visible = false;
            c.Width = Unit.Pixel(50);
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderNumber";
            c.Caption = "Order Number";
            c.Width = Unit.Pixel(150);
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Account";
            c.Caption = "Account Code";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "AccountName";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "DateCreated";
            c.Caption = "Created";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "DateCreated");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "DateUpdated";
            c.Caption = "Updated";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.Width = Unit.Pixel(120);
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "DateUpdated");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
            });
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "POStatus";
            c.Caption = "Status";
            c.Width = Unit.Pixel(50);
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            c.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboSettings = (ComboBoxProperties)c.PropertiesEdit;
            comboSettings.DataSource = Enum.GetValues(typeof(OrderStatusEnum));
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderTypeId";
            c.Visible = false;

        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Currecny";
            c.Caption = "Currency";
            c.Width = Unit.Pixel(50);
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderTotal";
            c.Caption = "Order Total";
            c.Width = Unit.Pixel(80);
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "PickerName";
            c.Caption = "Picker Name";
            c.Width = Unit.Percentage(20);
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            c.Settings.AllowSort = DefaultBoolean.True;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "OrderNotesListText";
            c.Caption = "Notes";
            c.Width = Unit.Percentage(20);
            c.PropertiesEdit.EncodeHtml = false;
            c.Settings.AllowAutoFilter = DefaultBoolean.False;
            c.Settings.AllowSort = DefaultBoolean.False;
        });


        settings.HtmlRowPrepared = (s, e) =>
        {
            if (e.RowType != GridViewRowType.Data) return;

            int name = (int)e.GetValue("OrderTypeId");
            if (name == (int)InventoryTransactionTypeEnum.Proforma)
                e.Row.BackColor = System.Drawing.Color.LightCoral;
            if (name == (int)InventoryTransactionTypeEnum.Quotation)
                e.Row.BackColor = System.Drawing.Color.Orange;
            if (name == (int)InventoryTransactionTypeEnum.Loan)
                e.Row.BackColor = System.Drawing.Color.LightSteelBlue;
            if (name == (int)InventoryTransactionTypeEnum.Samples)
                e.Row.BackColor = System.Drawing.Color.LightSeaGreen;
            var statusId = (int)e.GetValue("OrderStatusID");
            if (statusId == (int)OrderStatusEnum.Cancelled)
            {
                e.Row.BackColor = System.Drawing.Color.LightCoral;
                e.Row.ForeColor = System.Drawing.Color.Black;
            }

        };
        settings.SettingsDetail.ShowDetailRow = true;

        settings.SetDetailRowTemplateContent(c =>
        {

            Html.DevExpress().PageControl(s =>
            {
                s.EnableTabScrolling = true;
                s.Width = System.Web.UI.WebControls.Unit.Percentage(100);
                s.Name = DataBinder.Eval(c.DataItem, "OrderID").ToString();
                s.TabPages.Add("Order Details").SetContent(() =>
                {
                    Html.RenderAction("_SalesOrderDetails", "Order", new { Id = DataBinder.Eval(c.DataItem, "OrderID") });
                });

            }).GetHtml();
        });
        settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
        settings.ClientSideEvents.EndCallback = "OnGridFocusedRowChanged";

        settings.ClientSideEvents.BeginCallback = "OnBeginCallbackSO";

        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
        settings.SettingsPager.PageSize = 10;

    });
}

@grid.BindToCustomData(Model).GetHtml()