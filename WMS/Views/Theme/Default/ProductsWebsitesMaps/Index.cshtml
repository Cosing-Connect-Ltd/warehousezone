@using Ganedata.Core.Entities.Helpers
@{
    Layout = "~/Views/Theme/Default/Shared/_Layout.cshtml";
    ViewBag.Title = "Product Website Maps";
}
@section scripts {


    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.GridView, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DataView, Theme = GaneStaticAppExtensions.DevexTheme }
        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.GridView },
        new Script { ExtensionType = ExtensionType.DataView }
        )
}
<script>
    function SelectionChangeds(s, e) {
        s.GetSelectedFieldValues("ProductId", GetSelectedFieldValuesCallback);
    }


    function GetSelectedFieldValuesCallback(values) {
        $("#SelectedProductIds").val(values.join());
    }
    var command;
    function OnStartCallback(s, e) {
        command = e.command;

    }
    function OnGridEndCallBack(s, e) {
        if (command == "REFRESH") {
            s.UnselectRows();
        }
    }

</script>
<h2><span>Product Website Maps (@ViewBag.SiteName)</span></h2>
<script type="text/javascript">
    function OnGridFocusedRowChanged(s, e) {
        $('.selkey').val(s.GetRowKey(s.GetFocusedRowIndex()));
    }
    MVCxClientGlobalEvents.AddControlsInitializedEventHandler(OnBeginGridCallback);

    function OnBeginGridCallback(s, e) {
        e.customArgs = MVCxClientUtils.GetSerializedEditorValuesInContainer("frmPriceGroupPrices");
        var rowIndex = parseInt($("#RowIndexForProductId").val()) || 0;
        e.customArgs["ProductID"] = ProductWebsiteGridView.GetRowKey(rowIndex);
    }

    function OnEndGridCallback(s, e) {
        var lastIndex = parseInt($("#LastEditingRowIndex").val()) || 0;
        SetGridEditorToRowIndex(lastIndex);
    }

    function SetGridEditorToRowIndex(index) {
        ProductWebsiteGridView.batchEditApi.StartEdit(index, ProductWebsiteGridView.GetColumnByField($("#LastEditingColIndex").val()).index);
    }

    function OnDetailsChanged(s, e) {
        ProductWebsiteGridView.UpdateEdit();
    }

    function OnSpecialPricesGridFocusChanged(s, e) {
        if (e.cellInfo.rowVisibleIndex >= 0) {
            $("#LastEditingRowIndex").val(e.cellInfo.rowVisibleIndex);
        }

        $("#RowIndexForProductId").val(e.cellInfo.rowVisibleIndex);
        $("#LastEditingColIndex").val(e.cellInfo.column.fieldName);
    }
</script>

@Html.Hidden("LastEditingRowIndex")
@Html.Hidden("LastEditingColIndex")
@Html.Hidden("RowIndexForProductId")

@Html.Hidden("selkey")
@Html.Hidden("SelectedProductIds")
@Html.Hidden("SiteId", (int)ViewBag.siteid)
<div>
    @Html.Action("WebsiteProductsList")
    <div class='col-md-offset-2 col-md-10 bottom-right'>
        <div class="back-list">
            <a href="@Url.Action("Index","TenantWebsites")" class="btn btn-default">Back to List</a>
        </div>
    </div>
</div>



