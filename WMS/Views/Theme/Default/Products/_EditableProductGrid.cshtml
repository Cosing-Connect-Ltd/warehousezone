@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "ProductEditListGridView";
        settings.CallbackRouteValues = new { Controller = "Products", Action = "_EditableProductGrid", AssociatedItem = ViewBag.AssociatedItem, KitType = ViewBag.KitTypes };

        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.Batch;
        settings.SettingsEditing.BatchEditSettings.EditMode = GridViewBatchEditMode.Cell;
        settings.SettingsEditing.BatchEditSettings.StartEditAction = GridViewBatchStartEditAction.DblClick;
        settings.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
        settings.EnableCallbackAnimation = false;
        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Paging,
            new { Controller = "Products", Action = "_ProductEditListPaging", AssociatedItem = ViewBag.AssociatedItem, KitType = ViewBag.KitTypes }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Filtering,
        new { Controller = "Products", Action = "_ProductsEditFiltering", AssociatedItem = ViewBag.AssociatedItem, KitType = ViewBag.KitTypes }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Sorting,
        new { Controller = "Products", Action = "_ProductsEditGetDataSorting", AssociatedItem = ViewBag.AssociatedItem, KitType = ViewBag.KitTypes }
        );

        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.KeyFieldName = "ProductId";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = false;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;
        if (ViewBag.AssociatedItem == null)
        {
            settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Products", Action = "SaveProductEdit" };
            settings.Columns.Add(c =>
            {
                c.FieldName = "Name";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                c.EditFormSettings.Visible = DefaultBoolean.False;
                c.EditorProperties().TextBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnDetailsChanged(s,e);}";
                });
                c.EditFormSettings.Visible = DefaultBoolean.True;

            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "SKUCode";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                c.EditFormSettings.Visible = DefaultBoolean.False;
                c.EditorProperties().TextBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnDetailsChanged(s,e);}";
                });
                c.EditFormSettings.Visible = DefaultBoolean.True;
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "Serialisable";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditFormSettings.Visible = DefaultBoolean.True;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnDetailsChanged(s,e);}";
                });
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "ProcessByPallet";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditFormSettings.Visible = DefaultBoolean.True;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnDetailsChanged(s,e);}";
                });

            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "TopProduct";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditFormSettings.Visible = DefaultBoolean.True;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnDetailsChanged(s,e);}";
                });
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "BestSellerProduct";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnDetailsChanged(s,e);}";
                });
                c.EditFormSettings.Visible = DefaultBoolean.True;

            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "SpecialProduct";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnDetailsChanged(s,e);}";
                });
                c.EditFormSettings.Visible = DefaultBoolean.True;
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "OnSaleProduct";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.LostFocus = "function(s,e){ OnDetailsChanged(s,e);}";
                });
                c.EditFormSettings.Visible = DefaultBoolean.True;
            });

            settings.ClientSideEvents.BeginCallback = "function(s,e){ OnBeginEditGridCallback(s, e); }";
            settings.ClientSideEvents.FocusedCellChanging = "OnEditGridFocusChanged";
            settings.ClientSideEvents.EndCallback = "OnEndEditGridCallback";
        }
        else
        {
            settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Products", Action = "SaveAssociated", AssociatedItem = ViewBag.AssociatedItem, KitType = ViewBag.KitTypes };
            settings.Columns.Add(c =>
            {
                c.FieldName = "Name";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                c.EditFormSettings.Visible = DefaultBoolean.False;
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "SKUCode";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                c.EditFormSettings.Visible = DefaultBoolean.False;
            });

            if (ViewBag.KitTypes != Ganedata.Core.Entities.Enums.ProductKitTypeEnum.Grouped)
            {
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Qty";
                    c.Caption = "Qty";
                    c.ColumnType = MVCxGridViewColumnType.SpinEdit;
                    c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
                    c.EditorProperties().SpinEdit(p =>
                    {
                        p.MinValue = 0;
                        p.MaxValue = 1000000000;
                        p.ClientSideEvents.LostFocus = "function(s,e){ OnDetailsChanged(s,e);}";
                    });
                });
            }
            else
            {
                settings.Columns.Add(c =>
                {
                    c.FieldName = "Id";
                    c.Caption = "Kit Type";
                    c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
                    c.EditorProperties().ComboBox(p =>
                    {
                        p.ValueField = "Id";
                        p.TextField = "Name";
                        p.ValueType = typeof(Int32);
                        p.DataSource = (List<Ganedata.Core.Entities.Domain.ProductKitType>)ViewBag.GetKitTypes;
                        p.ClientSideEvents.ValueChanged = "function(s,e){ OnDetailsChanged(s,e);}";
                    });

                });
            }

    //if (ViewBag.KitTypes == Ganedata.Core.Entities.Enums.ProductKitTypeEnum.ProductByAttribute)
    //{

    settings.Columns.Add(column =>
            {
                column.Caption = "Attributes";
                column.Name = "AttributeValues";

                column.SetDataItemTemplateContent(container =>
                {
                    List<string> type = DataBinder.Eval(container.DataItem, "AttributeValueNames") as List<string>;

                    if (type != null && type.Count() > 0)
                    {
                        var data = string.Join(", ", type);
                        ViewContext.Writer.Write(data);

                    }

                });
            });

    //}

    settings.Columns.Add(c =>
            {
                c.FieldName = "IsActive";
                c.Caption = "Active";
                c.ColumnType = MVCxGridViewColumnType.CheckBox;
                c.EditorProperties().CheckBox(p =>
                {
                    p.ClientSideEvents.ValueChanged = "function(s,e){ OnDetailsChanged(s,e);}";
                    p.ValidationSettings.Display = Display.Dynamic;
                    p.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.None;
                });

            });
            settings.ClientSideEvents.BeginCallback = "function(s,e){ OnBeginGridCallback(s, e); }";
            settings.ClientSideEvents.FocusedCellChanging = "OnSpecialPricesGridFocusChanged";
            settings.ClientSideEvents.EndCallback = "OnEndGridCallback";

        }


        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };

    });
}

@grid.BindToCustomData(Model).GetHtml()