@model Ganedata.Core.Entities.Domain.ShoppingVoucher
@using Ganedata.Core.Entities.Helpers

@section scripts {

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.PopupControl, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.SpinEdit, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DateEdit, Theme = GaneStaticAppExtensions.DevexTheme }
        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.PopupControl },
        new Script { ExtensionType = ExtensionType.SpinEdit },
        new Script { ExtensionType = ExtensionType.DateEdit }
        )
}

@{
    ViewBag.Title = "Discount Voucher " + (Model.ShoppingVoucherId > 0 ? "Edit" : "Create");
}

<div>
    <h2><span>@ViewBag.Title</span></h2>
    <form class="form-horizontal" action="@Url.Action("SaveVoucher","ShoppingVoucher")" method="post" id="frmSaveVoucher">
       
        <div class="col-md-8 pull-left">

            @Html.AntiForgeryToken()
            @Html.HiddenFor(c => c.ShoppingVoucherId)
            @Html.ValidationSummary()
             
           
            <h4 class="alert alert-info">Voucher Info</h4>

            @if (ViewBag.ErrorMessage != null)
            {
                <div class="alert-danger col-md-12">
                    @ViewBag.ErrorMessage
                </div>
            }

                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(c => c.VoucherTitle, new {@class = "col-md-4 control-label"})
                    <div class="col-md-8">
                        @Html.TextBoxFor(c => c.VoucherTitle, new {@placeholder = "Title", @class = "form-control"})
                    </div>
                </div>

                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(c => c.VoucherCode, new {@class = "col-md-4 control-label"})
                    <div class="col-md-8">
                        @Html.TextBoxFor(c => c.VoucherCode, new {@placeholder = "Code", @class = "form-control"})
                    </div>
                </div>

                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(c => c.DiscountType, new {@class = "col-md-4 control-label"})
                    <div class="col-md-8">
                        @Html.DropDownListFor(c => c.DiscountType, new SelectList(ViewBag.DiscountTypeList, "Value", "Text", (int) Model.DiscountType), new {@placeholder = "Discount Type", @class = "form-control", onchange = "UpdateRewardContents();"})
                    </div>
                </div>
                <div class="input-group h-100 justify-content-center align-items-center reward-figure">
                    @Html.LabelFor(m => m.DiscountFigure, new {@class = "col-md-4 control-label"})
                    <div class="col-md-8">
                        @Html.TextBoxFor(c => c.DiscountFigure, new {@placeholder = "Amount/Percentage", @class = "form-control"})
                    </div>
                </div>
            <div class="input-group h-100 justify-content-center align-items-center reward-product" style="display: none">
                @Html.LabelFor(m => m.RewardProductId, new {@class = "col-md-4 control-label"})
                <div class="col-md-8">
                    @Html.DropDownListFor(m => m.RewardProductId, new SelectList(ViewBag.Products, "Value", "Text", Model.RewardProductId), new {@class = "chosen-select"})
                </div>
            </div>
            <h4 class="alert alert-info">Restrictions</h4>
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(m => m.MaximumAllowedUse, new {@class = "col-md-4 control-label"})
                    <div class="col-md-8">
                        @Html.TextBoxFor(c => c.MaximumAllowedUse, new {@placeholder = "Use X times max", @class = "form-control"})
                    </div>
                </div>
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(m => m.VoucherUserId, new {@class = "col-md-4 control-label"})
                    <div class="col-md-8">
                        @Html.DropDownListFor(c => c.VoucherUserId, new SelectList(ViewBag.UserList, "Value", "Text", Model.VoucherUserId), new {@placeholder = "User specific", @class = "form-control chosen-select"})
                    </div>
                </div>
           
        </div>
        <div class="col-md-8 pull-left">
            <h2>User Earning Triggers</h2>
            <ul>
                <li>When they first register, they get 50% off first order through App</li>
                <li>When they first register, they get 25% off home delivery order through App, minimum value £5</li>
                <li>When they first register, if they use "Add Promo code" option and add one of the friends code, both get 100 points</li>
            </ul>
        </div>

        <div class="col-md-offset-2 col-md-10 bottom-right">
            <input type="submit" class="btn btn-primary" id="saveBtn_ShoppingVoucher" value="Save" />
            <a class="btn btn-default" href="@Url.Action("Index","ShoppingVoucher")">Cancel</a>
        </div>

    </form>
</div>
<script>
    $(document).ready(function() {
        UpdateRewardContents();
    });
</script>