@model Ganedata.Core.Entities.Domain.ProductCategory
@using Ganedata.Core.Entities.Helpers

@section scripts {

    @Html.DevExpress().GetStyleSheets(
        new StyleSheet { ExtensionType = ExtensionType.SpinEdit, Theme = GaneStaticAppExtensions.DevexTheme },
        new StyleSheet { ExtensionType = ExtensionType.DateEdit, Theme = GaneStaticAppExtensions.DevexTheme },
          new StyleSheet { ExtensionType = ExtensionType.UploadControl, Theme = GaneStaticAppExtensions.DevexTheme }
        )

    @Html.DevExpress().GetScripts(
        new Script { ExtensionType = ExtensionType.SpinEdit },
        new Script { ExtensionType = ExtensionType.DateEdit },
        new Script { ExtensionType = ExtensionType.UploadControl }
        )
}

@{
    ViewBag.Title = "Add New Product Category";
}

<h2><span>Product Category</span></h2>
@Html.Hidden("productCategory", true)
<div class="col-md-12 p-0">
    <div class="col-md-6">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">


                @Html.ValidationSummary(true)
                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.ProductCategoryName, new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.ProductCategoryName)
                        @Html.ValidationMessageFor(model => model.ProductCategoryName)
                    </div>
                </div>

                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.SortOrder, new { @class = "col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.SortOrder)
                        @Html.ValidationMessageFor(model => model.SortOrder)
                    </div>
                </div>

                <div class="input-group h-100 justify-content-center align-items-center">
                    @Html.LabelFor(model => model.ProductGroupId, "Product Group", htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.DropDownList("ProductGroupId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="input-group h-100 justify-content-center align-items-center">
                    <div class="col-md-offset-2 col-md-10 bottom-right">
                        <input type="submit" value="Create" class="btn btn-primary" />
                        <div class="back-list">@Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })</div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>