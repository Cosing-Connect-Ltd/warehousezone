@using Ganedata.Core.Entities.Helpers
    @{
        var grid = Html.DevExpress().GridView(settings =>
        {
            settings.Name = "TenantCurrencyExRate";
            settings.CallbackRouteValues = new
            {
                Controller = "CurrencyExRate",
                Action = "CurrencyExList"
            };
            settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
            settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Paging,
            new { Controller = "CurrencyExRate", Action = "CurrencyExRateListPaging" }
            );

            settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Filtering,
            new { Controller = "CurrencyExRate", Action = "CurrencyExRateListFiltering" }
            );

            settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Sorting,
            new { Controller = "CurrencyExRate", Action = "CurrencyExRateListSorting" }
            );
            settings.Settings.ShowHeaderFilterButton = false;
            settings.SettingsPopup.HeaderFilter.Height = 200;
            settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;


            settings.KeyFieldName = "CurrencyID";

            settings.SettingsPager.Visible = true;
            settings.Settings.ShowGroupPanel = true;
            settings.Settings.ShowFilterRow = true;
            settings.SettingsBehavior.AllowFocusedRow = true;

            settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
            settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
            settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
            settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
            settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;


            settings.Columns.Add("CurrencyId", "Currency ID");
            settings.Columns.Add("CurrencyName", "Currency Name");
            settings.Columns.Add("CurrencySymbol", "Currency Symbol");
            settings.Columns.Add(c => {
                c.FieldName = "ExchangeRate";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
                c.ColumnType = MVCxGridViewColumnType.Default;
                c.CellStyle.BackColor = DXColor.Coral;
            });

            settings.Columns.Add(c =>
            {
                c.FieldName = "DateUpdated";
                c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
                c.ColumnType = MVCxGridViewColumnType.DateEdit;
                c.SetDataItemTemplateContent(m =>
                {
                    var date = (DateTime?)DataBinder.Eval(m.DataItem, "DateUpdated");
                    DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                    ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy HH:mm") : "");
                });
            });

            settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
            settings.ClientSideEvents.EndCallback = "OnGridFocusedRowChanged";
            settings.SettingsPager.PageSizeItemSettings.Visible = true;
            settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };

        });
    }
    @grid.BindToCustomData(Model).GetHtml()

