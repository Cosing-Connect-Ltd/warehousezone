@using Ganedata.Core.Entities.Helpers
@model Ganedata.Core.Entities.Domain.Order


@Html.DevExpress().GetStyleSheets(
    new StyleSheet { ExtensionType = ExtensionType.GridView, Theme = GaneStaticAppExtensions.DevexTheme },
    new StyleSheet { ExtensionType = ExtensionType.PopupControl, Theme = GaneStaticAppExtensions.DevexTheme },
    new StyleSheet { ExtensionType = ExtensionType.SpinEdit, Theme = GaneStaticAppExtensions.DevexTheme },
    new StyleSheet { ExtensionType = ExtensionType.DateEdit, Theme = GaneStaticAppExtensions.DevexTheme }
    )

@Html.DevExpress().GetScripts(
    new Script { ExtensionType = ExtensionType.GridView },
    new Script { ExtensionType = ExtensionType.PopupControl },
    new Script { ExtensionType = ExtensionType.SpinEdit },
    new Script { ExtensionType = ExtensionType.DateEdit },
    new Script { ExtensionType = ExtensionType.PageControl }
    )
@{
    ViewBag.Title = "Direct Sales Orders";
}
<script>
    function OnSalesOrderTabchange(s, e) {
        var gridview = GetDevexControlByName('_SalesOrderListGridView' + tabSOs.activeTabIndex);
        var rowKey = gridview.GetRowKey(gridview.GetFocusedRowIndex());
        $('#selkeySalesOrderList').val(rowKey);
    }

    function OnGridDirectFocusedRowChanged(s, e) {

        $('#selkeyDirectSalesOrderId').val(s.GetRowKey(s.GetFocusedRowIndex()));
    }

    function ProcessRefundRequest() {
        ModalProcessRefund.Show();
    }

    function OnBeginRefundCallback(s, e) {
        e.customArgs["id"] = $("#OrderID").val();
    }

</script>
@Html.Hidden("selkey", null, new { @class = "selkey" })
@Html.HiddenFor(m => m.OrderID)

@if (ViewBag.ErrorMessage!=null)
{
    <div class="col-sm-12">
        <div class="alert alert-danger">
            <h4>@ViewBag.ErrorMessage</h4>
            @if (ViewBag.ErrorMessageDetails != null)
            {
                <small>
                    <b> @ViewBag.ErrorMessageDetails</b>
                </small>
            }
        </div>
    </div>
}
<div class="col-sm-12">

    @Html.Action("_DirectSalesRefundPartial", "DirectSales", new { id = Model.OrderID })

</div>

@Html.DevExpress().PopupControl(
    settings =>
    {
        settings.HeaderText = "Refunds";
        settings.Name = "ModalProcessRefund";
        settings.LoadContentViaCallback = LoadContentViaCallback.OnFirstShow;
        settings.CallbackRouteValues = new { Controller = "DirectSales", Action = "_RefundCreateForm", Method = "GET" };
        settings.Width = 600;
        settings.Height = 420;
        settings.AllowDragging = true;
        settings.CloseAction = CloseAction.CloseButton;
        settings.CloseOnEscape = true;
        settings.PopupAnimationType = AnimationType.None;
        settings.ShowHeader = true;
        settings.Modal = true;
        settings.AutoUpdatePosition = true;
        settings.PopupHorizontalAlign = PopupHorizontalAlign.WindowCenter;
        settings.PopupVerticalAlign = PopupVerticalAlign.WindowCenter;
        settings.ScrollBars = System.Web.UI.WebControls.ScrollBars.Vertical;
        settings.EnableClientSideAPI = true;
        settings.ClientSideEvents.BeginCallback = "function(s,e){ OnBeginRefundCallback(s,e); }";

    }).GetHtml()

@if (ViewBag.RefundRestricted!=true)
{
<a href="javascript:;" class="btn btn-primary" onclick="ProcessRefundRequest();">Refund</a>
}
<a href="@Url.Action("Index", "DirectSales")" class="btn btn-primary">Back</a>


