@model Ganedata.Core.Entities.Domain.ViewModels.FileUploaderViewModel


@Html.DevExpress().UploadControl(settings =>
{
    if (!string.IsNullOrEmpty(Model.BindingName))
    {
        settings.Name = Model.BindingName + "UploadControl";
    }
    else
    {
        settings.Name = "UploadControl";
    }

    settings.ShowAddRemoveButtons = true;
    settings.ShowProgressPanel = true;
    settings.ShowClearFileSelectionButton = true;
    settings.ShowUploadButton = Model.ShowUploadButton == null != Model.ShowUploadButton == true;

    if (Model.IsMultiselect)
    {
        settings.AdvancedModeSettings.EnableMultiSelect = true;
        settings.NullText = "Select multiple files...";
    }
    else
    {
        settings.AdvancedModeSettings.EnableMultiSelect = false;
        settings.UploadMode = UploadControlUploadMode.Standard;
        settings.AutoStartUpload = true;
        settings.NullText = "Select " + (!string.IsNullOrEmpty(Model.DisplayName) ? Model.DisplayName + " " : string.Empty) + "file...";
    }

    settings.AdvancedModeSettings.EnableFileList = true;
    settings.AdvancedModeSettings.EnableDragAndDrop = true;
    settings.CallbackRouteValues = new { Controller = Model.ControllerName, Action = "Upload" + Model.BindingName + "File" };
    settings.Size = 30;
    if (Model.AllowedFileExtensions == null || Model.AllowedFileExtensions.Length <= 0)
    {
        Model.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".gif", ".png", ".avi", ".mp4", ".pdf", ".docx", ".xlxs" };
    }
    settings.ValidationSettings.Assign(new UploadControlValidationSettings { AllowedFileExtensions = Model.AllowedFileExtensions, MaxFileSize = 100000000 });
    settings.ClientSideEvents.FileUploadComplete = "function(s,e) { on" + Model.BindingName + "FileUploadComplete(s,e); }";
    settings.ClientSideEvents.FilesUploadStart = "function(s,e) { on" + Model.BindingName + "FileUploadStart(s,e); }";

}).GetHtml()

@Html.Hidden(Model.BindingName + "HasUploadedFile", Model.UploadedFiles != null && Model.UploadedFiles.Count > 0)
<div id="dv@(Model.BindingName)Files" class="dvfiles @(Model.UploadedFiles != null && Model.UploadedFiles.Count > 0 ? "dvfiles-vidible" : "")">
    <strong>Uploaded Files</strong>
    <table>
        @if (Model.UploadedFiles != null && Model.UploadedFiles.Count > 0)
        {
            foreach (var file in Model.UploadedFiles)
            {
                <tr>
                    <td id="td@(Model.BindingName)FileName">@file</td>
                    <td>
                        <p>&nbsp;</p>
                    </td>
                    <td><a class="LRemove" onclick="remove@(Model.BindingName)File('@file')">Remove</a></td>
                    <td>
                        <p>&nbsp;</p>
                    </td>
                </tr>
            }
        }
    </table>
</div>

<script id="uploader@(Model.BindingName)Files" type="text/x-jquery-tmpl">
    <tr>
        <td id="td@(Model.BindingName)FileName">${FileName}</td>
        <td><p>&nbsp;</p></td>
        <td><a class="LRemove" onclick="remove@(Model.BindingName)File('${FileName}')">Remove</a></td>
    </tr>
</script>

<script id="uploaderDownload@(Model.BindingName)Files" type="text/x-jquery-tmpl">
    <tr>
        <td id="tdfileName">${FileName}</td>
        <td><p>&nbsp;</p></td>
        <td class="FileRow"><a class="LRemove" onclick="remove@(Model.BindingName)File('${FileName}')">Remove</a></td>
        <td><p>&nbsp;</p></td>
        <td class="FileRow"><a class="LRemove" onclick="download@(Model.BindingName)File('${FileName}')" download>Download</a></td>
    </tr>
</script>
<br />
<script type="text/javascript">
    function on@(Model.BindingName)FileUploadComplete(s, e) {
        if (e.callbackData) {
            $("#dv@(Model.BindingName)Files").show();
            var fileData = e.callbackData.split('|');
            var Fileobj = { FileName: fileData };
            var result = $("#uploader@(Model.BindingName)Files").tmpl(Fileobj);
            $("#dv@(Model.BindingName)Files").append(result);
            $('#dvbusy').hide();
            $("#@(Model.BindingName)HasUploadedFile").val('True');
        }
    }

    function on@(Model.BindingName)FileUploadStart(s, e) {
        if ('@(Model.IsMultiselect)' == 'False' && $("#@(Model.BindingName)HasUploadedFile").val() == 'True') {
            e.cancel = true;
            alert("Only one file allow to be select");
            return;
        }
    }

    function remove@(Model.BindingName)File(fileName) {
        $('#dvbusy').show();

        $.ajax({
            type: "POST",
            url: "/@(Model.ControllerName)/RemoveFile",
            data: { "fileName": fileName, "bindingName": '@Model.BindingName' },
            success: function (files) {
                $("#dvbusy").hide();
                if (files.files == null) {
                    $("#dv@(Model.BindingName)Files").empty();
                    $("#dv@(Model.BindingName)Files").hide();
                    $("#dv@(Model.BindingName)Files").append(' <strong>Uploaded Files</strong>  ');
                    $("#@(Model.BindingName)HasUploadedFile").val('False');
                }

                else {
                    $("#dv@(Model.BindingName)Files").empty();
                    $("#dv@(Model.BindingName)Files").append(' <strong>Uploaded Files</strong>  ');
                    $.each(files.files, function (index, value) {
                        var Fileobj = { FileName: value };
                        if (!$('#hdPFilesEdit').val())
                            var result = $("#uploader@(Model.BindingName)Files").tmpl(Fileobj);
                        else
                            var result = $("#uploaderDownload@(Model.BindingName)Files").tmpl(Fileobj);
                        $("#dv@(Model.BindingName)Files").append(result);
                    });
                }
            }
        });
    }

    function download@(Model.BindingName)File(fileName) {
        window.open('/@(Model.ControllerName)/Download@(Model.BindingName)?fileName=' + fileName);
    }
</script>