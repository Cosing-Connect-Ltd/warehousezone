@using Ganedata.Core.Entities.Helpers
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "ApiCredentialListGridView";
        settings.CallbackRouteValues = new { Controller = "ApiCredentials", Action = "ApiCredentialList" };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

        settings.CustomBindingRouteValuesCollection.Add(
            GridViewOperationType.Paging,
            new { Controller = "ApiCredentials", Action = "_ApiCredentialListPaging" }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Filtering,
        new { Controller = "ApiCredentials", Action = "_ApiCredentialsFiltering" }
        );

        settings.CustomBindingRouteValuesCollection.Add(
        GridViewOperationType.Sorting,
        new { Controller = "ApiCredentials", Action = "_ApiCredentialsGetDataSorting" }
        );

        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.KeyFieldName = "Id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFilterRow = true;
        settings.Settings.ShowHeaderFilterButton = false;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;

        settings.SettingsCookies.Enabled = true;
        settings.SettingsCookies.CookiesID = "ApiCredentialsList";
        settings.SettingsCookies.StoreColumnsVisiblePosition = true;
        settings.SettingsCookies.StoreColumnsWidth = true;
        settings.SettingsCookies.StoreFiltering = true;
        settings.SettingsCookies.StoreGroupingAndSorting = true;
        settings.SettingsCookies.StorePaging = true;


        settings.Columns.Add(c =>
        {
            c.FieldName = "ApiKey";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });

        settings.Columns.Add(c =>
        {
            c.FieldName = "ApiTypes";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "ApiUrl";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "UserName";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "AccountNumber";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "ExpiryDate";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;
            c.ColumnType = MVCxGridViewColumnType.DateEdit;
            c.SetDataItemTemplateContent(m =>
            {
                var date = (DateTime?)DataBinder.Eval(m.DataItem, "ExpiryDate");
                DateTime? localDate = DateTimeToLocal.Convert(date, ViewBag.TimeZone);
                ViewContext.Writer.Write(localDate.HasValue ? localDate.Value.ToString("dd/MM/yyyy") : "");
            });
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "SiteName";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Location";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
        });


    settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
    settings.ClientSideEvents.EndCallback = "OnGridFocusedRowChanged";

    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };
    settings.SettingsDetail.ShowDetailRow = false;

});

    }

@grid.BindToCustomData(Model).GetHtml()