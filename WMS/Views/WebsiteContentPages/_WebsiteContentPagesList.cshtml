@using System.Web.UI.WebControls
@using Ganedata.Core.Entities.Helpers
@using Ganedata.Core.Entities.Enums
@{
    var grid = Html.DevExpress().GridView(settings =>
    {
        settings.Name = "WebSiteNavigationGridView";
        settings.CallbackRouteValues = new { Controller = "WebsiteContentPages", Action = "_WebsiteContentPagesList", SiteId = ViewBag.SiteId };
        settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        settings.Settings.ShowHeaderFilterButton = false;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        settings.KeyFieldName = "Id";

        settings.SettingsPager.Visible = true;
        settings.Settings.ShowGroupPanel = true;
        settings.Settings.ShowFilterRow = true;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
        settings.SettingsAdaptivity.AdaptiveColumnPosition = GridViewAdaptiveColumnPosition.Right;
        settings.SettingsAdaptivity.AdaptiveDetailColumnCount = 1;
        settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = false;
        settings.SettingsAdaptivity.HideDataCellsAtWindowInnerWidth = 0;
        settings.Columns.Add("TenantWebsites.SiteName").Caption = "Site Name"; ;
        settings.Columns.Add("Title");
        settings.Columns.Add("pageUrl");
        settings.Columns.Add(c =>
        {
            c.FieldName = "Type";
            c.Caption = "Type";
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;
            c.ColumnType = MVCxGridViewColumnType.ComboBox;
            var comboSettings = (ComboBoxProperties)c.PropertiesEdit;
            comboSettings.DataSource = Enum.GetValues(typeof(ContentType));
        });
        settings.Columns.Add("ImageAltTag");
        
        settings.Columns.Add(c =>
        {
            c.FieldName = "SortOrder";
            c.Caption = "Sort Order";
            c.ColumnType = MVCxGridViewColumnType.SpinEdit;
            c.Settings.AutoFilterCondition = AutoFilterCondition.Equals;

        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "IsActive";
            c.Caption = "Active";
            c.ColumnType = MVCxGridViewColumnType.CheckBox;
            c.Settings.AutoFilterCondition = AutoFilterCondition.Contains;

        });
        settings.Columns.Add(c =>
        {
            c.FieldName = "Image";
            c.Settings.AllowAutoFilter = DefaultBoolean.False;
            c.Settings.AllowSort = DefaultBoolean.False;
            c.SetDataItemTemplateContent(m =>
            {
                var Logo = (string)DataBinder.Eval(m.DataItem, "Image");
                if (!string.IsNullOrEmpty(Logo))
                {

                    ViewContext.Writer.Write("<img src='" + Logo + "'style='max-height:120px;width:120px'>");
                }
            });
        });

        settings.ClientSideEvents.FocusedRowChanged = "OnGridFocusedRowChanged";
        settings.SettingsPager.PageSizeItemSettings.Visible = true;
        settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50" };

    });
}
@grid.Bind(Model).GetHtml()


